(()=>{"use strict";var e=".elements",t=".popup_profile",n=".popup_card",r=".popup__form_profile",o=".popup__form_card",i=".profile__name",u=".profile__character",a=".popup__button",c=".popup_image",s=".popup_avatar",l={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},f=".elements__like-button",p="elements__like-button_liked",h="popup_opened",y=document.querySelector(".page"),d=y.querySelector(t),_=d.querySelector(r),b=_.querySelector(a),v=y.querySelector(s).querySelector(".popup__form_avatar"),m=v.querySelector(a),g=y.querySelector(n),k=g.querySelector(o),S=k.querySelector(a),E=y.querySelector(".profile__cover"),w=y.querySelector(".profile__edit-button"),O=y.querySelector(".profile__add-button"),C=document.querySelector(c),P=(C.querySelector(".popup__img"),C.querySelector(".popup__caption"),d.querySelector(r)),j=(P.querySelector(".popup__input_user_name"),P.querySelector(".popup__input_user_character"),y.querySelector(i),y.querySelector(u),g.querySelector(o)),L=(j.querySelector(".popup__input_card_name"),j.querySelector(".popup__input_card_address"),j.querySelector(a),y.querySelector(e));function q(e,t,n,r){t.textContent=e?n:r}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var R=new WeakSet,T=function(){function e(){var t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t=this,n=R),n.add(t),this._token="eacdcad8-b7be-4b95-a68d-d5be8d193107",this._baseUrl="https://mesto.nomoreparties.co/v1/cohort-51"}var t,n;return t=e,(n=[{key:"getInitialUser",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"setUser",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:n})}).then(B(this,R,U))}},{key:"setAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then(B(this,R,U))}},{key:"setCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:n})}).then(B(this,R,U))}},{key:"delCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"PUT",headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"dislikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:{authorization:this._token}}).then(B(this,R,U))}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function U(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),x(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),x(this,"_closePopupByClick",(function(e){var t=e.target;(t.classList.contains("cross")||t.classList.contains("cross__img")||t===n._popup)&&n.close()})),this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add(h),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove(h),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("click",this._closePopupByClick)}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=z(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},J.apply(this,arguments)}function z(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}function H(e,t){return H=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},H(e,t)}function F(e,t){if(t&&("object"===N(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}var W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&H(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._form=t._popup.querySelector("form"),t}return t=u,(n=[{key:"setSubmitAction",value:function(e){this._submitHandlerDelete=e}},{key:"setEventListeners",value:function(){var e=this;J(M(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandlerDelete(t)}))}}])&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(){return Q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=X(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},Q.apply(this,arguments)}function X(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ee(e)););return e}function Y(e,t){return Y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Y(e,t)}function Z(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return $(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e){return ee=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ee(e)}function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Y(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ee(r);if(o){var n=ee(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Z(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),te($(n=i.call(this,e)),"_getInputValues",(function(){return n._formValues={},n._inputList.forEach((function(e){n._formValues[e.name]=e.value})),n._formValues})),te($(n),"setInputValues",(function(e){n._inputList.forEach((function(t){t.value=e[t.name]}))})),n._handleSubmitForm=t,n._inputList=n._popup.querySelectorAll(".popup__input"),n._form=n._popup.querySelector("form"),n._input=n._popup.querySelector(".popup__input"),n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;Q(ee(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmitForm(e._getInputValues())}))}},{key:"close",value:function(){Q(ee(u.prototype),"close",this).call(this),this._form.reset()}}])&&K(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function re(e){return re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},re(e)}function oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ie(){return ie="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=ue(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},ie.apply(this,arguments)}function ue(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=se(e)););return e}function ae(e,t){return ae=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ae(e,t)}function ce(e,t){if(t&&("object"===re(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function se(e){return se=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},se(e)}var le=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ae(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=se(r);if(o){var n=se(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ce(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImgPicture=t._popup.querySelector(".popup__img"),t._captionOfPopupImg=t._popup.querySelector(".popup__caption"),t}return t=u,(n=[{key:"open",value:function(e,t){this._popupImgPicture.src=e,this._popupImgPicture.alt=t,this._captionOfPopupImg.textContent=t,ie(se(u.prototype),"open",this).call(this)}}])&&oe(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var pe=function(){function e(t,n,r,o,i){var u=t.name,a=t.link,c=t._id,s=t.likes;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=u,this._link=a,this._id=c,this.likes=s,this._templateSelector=n,this.handleOpenBigImage=r,this.handleOpenPopupDelete=o,this.handleLike=i}var t,n;return t=e,(n=[{key:"_getCardElement",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".elements__element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._cardElement=this._getCardElement(),this.buttonLike=this._cardElement.querySelector(f),this._buttonDel=this._cardElement.querySelector(".elements__trash"),this.likeCounter=this._cardElement.querySelector(".elements__like-counter"),this.elImg=this._cardElement.querySelector(".elements__image"),this.elImg.src=this._link,this.elImg.alt=this._name,this._cardElement.querySelector(".elements__name").textContent=this._name,this._setEventListeners(),this._cardElement}},{key:"_setEventListeners",value:function(){var e=this;this._buttonDel.addEventListener("click",(function(t){return e._handleDeleteClick()})),this.buttonLike.addEventListener("click",(function(t){return e._toggleLike()})),this.elImg.addEventListener("click",(function(t){return e._handleImageClick()}))}},{key:"deleteCard",value:function(){this._cardElement.remove()}},{key:"getCardId",value:function(){return this._id}},{key:"_toggleLike",value:function(){this.handleLike(this),this.buttonLike.classList.toggle(p)}},{key:"_handleImageClick",value:function(){this.handleOpenBigImage(this._link,this._name)}},{key:"_handleDeleteClick",value:function(){this.handleOpenPopupDelete(this)}}])&&fe(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ye=function(){function e(t,n){var r,o,i=this,u=t.formSelector,a=t.inputSelector,c=t.submitButtonSelector,s=t.inactiveButtonClass,l=t.inputErrorClass,f=t.errorClass;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(){return i._inputList.some((function(e){return!e.validity.valid}))},(r="_hasInvalidInput")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[r]=o,this._formSelector=u,this._inputSelector=a,this._submitButtonSelector=c,this._inactiveButtonClass=s,this._inputErrorClass=l,this._errorClass=f,this._formEl=n}var t,n;return t=e,(n=[{key:"_showError",value:function(e,t){var n=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.classList.add(this._errorClass),n.textContent=t}},{key:"_hideError",value:function(e){var t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this.enableButtonState()}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formEl.querySelectorAll(this._inputSelector)),this._buttonElement=this._formEl.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(n){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","disabled")}},{key:"enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}},{key:"hideErrors",value:function(){var e=this;this._inputList.forEach((function(t){e._hideError(t)}))}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&he(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function de(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _e=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"appendItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}}])&&de(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ve=function(){function e(t){var n=t.userNameSelector,r=t.userJobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameNode=document.querySelector(n),this._userJobNode=document.querySelector(r),this._userAvatar=document.querySelector(".profile__avatar")}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userName=this._userNameNode.textContent,this._userJob=this._userJobNode.textContent,this._userData={name:this._userName,about:this._userJob},this._userData}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;t&&(this._userNameNode.textContent=t),n&&(this._userJobNode.textContent=n)}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}}])&&be(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),me=new T;function ge(e){return new pe(e,"#card-template",we,Ce,ke).generateCard()}function ke(e){e.buttonLike.classList.contains(p)?me.dislikeCard(e.getCardId()).then((function(t){e.likeCounter.textContent=t.likes.length})).catch((function(e){console.log(e)})):me.likeCard(e.getCardId()).then((function(t){e.likeCounter.textContent=t.likes.length})).catch((function(e){console.log(e)}))}me.getInitialUser().then((function(e){Se.setUserInfo(e),Se.setUserAvatar(e.avatar);var t=e._id;me.getInitialCards().then((function(e){qe.renderItems(e);for(var n=L.querySelectorAll("li"),r=0;r<e.length;r++)n[r].querySelector("span").textContent=e[r].likes.length;function o(e){var n=[];return e.forEach((function(e){n.push(e._id)})),n.some((function(e){return e===t}))}for(var i=0;i<e.length;i++)e[i].owner._id!==t&&n[i].querySelector(".elements__trash").remove(),o(e[i].likes)&&n[i].querySelector(f).classList.add(p)})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}));var Se=new ve({userNameSelector:i,userJobSelector:u}),Ee=new le(c);function we(e,t){Ee.open(e,t)}Ee.setEventListeners();var Oe=new W(".popup_delete");function Ce(e){Oe.setSubmitAction((function(){me.delCard(e.getCardId()).then(Oe.close()).catch((function(e){console.log(e)})),e.deleteCard()})),Oe.open()}Oe.setEventListeners();var Pe=new ne(t,(function(e){q(!0,b,"Сохранение...","Сохранить"),me.setUser(e).then((function(e){Se.setUserInfo(e),Pe.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,b,"Сохранение...","Сохранить")}))}));Pe.setEventListeners();var je=new ne(s,(function(e){q(!0,m,"Сохранение...","Сохранить"),me.setAvatar(e.link).then((function(e){Se.setUserAvatar(e.avatar),je.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,m,"Сохранение...","Сохранить")}))}));je.setEventListeners();var Le=new ne(n,(function(e){q(!0,S,"Создание...","Создать"),me.setCard(e).then((function(e){qe.prependItem(ge(e)),Le.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,S,"Создание...","Создать")}))}));Le.setEventListeners();var qe=new _e({renderer:function(e){var t=ge(e);qe.appendItem(t)}},e),Ie=new ye(l,_);Ie.enableValidation();var Be=new ye(l,k);Be.enableValidation();var Re=new ye(l,v);Re.enableValidation(),w.addEventListener("click",(function(){Pe.open(),Pe.setInputValues(Se.getUserInfo()),Ie.hideErrors()})),E.addEventListener("click",(function(){je.open(),Re.hideErrors(),Re.disableButtonState()})),O.addEventListener("click",(function(){Le.open(),Be.hideErrors(),Be.disableButtonState()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,