(()=>{"use strict";var e=".elements",t=".popup_profile",n=".popup_card",r=".popup__form_profile",o=".popup__form_card",i=".profile__name",u=".profile__character",a=".popup__button",c=".popup_image",s=".popup_avatar",l={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},f=".elements__like-button",p="elements__like-button_liked",h="popup_opened",y=document.querySelector(".page"),d=y.querySelector(t),_=d.querySelector(r),b=_.querySelector(a),v=y.querySelector(s).querySelector(".popup__form_avatar"),m=v.querySelector(a),g=y.querySelector(n),k=g.querySelector(o),S=k.querySelector(a),E=y.querySelector(".profile__cover"),w=y.querySelector(".profile__edit-button"),O=y.querySelector(".profile__add-button"),C=document.querySelector(c),P=(C.querySelector(".popup__img"),C.querySelector(".popup__caption"),d.querySelector(r)),j=(P.querySelector(".popup__input_user_name"),P.querySelector(".popup__input_user_character"),y.querySelector(i),y.querySelector(u),g.querySelector(o)),L=(j.querySelector(".popup__input_card_name"),j.querySelector(".popup__input_card_address"),j.querySelector(a),y.querySelector(e));function q(e,t,n,r){t.textContent=e?n:r}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var R=new WeakSet,T=function(){function e(){var t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t=this,n=R),n.add(t),this._token="eacdcad8-b7be-4b95-a68d-d5be8d193107",this._baseUrl="https://mesto.nomoreparties.co/v1/cohort-51"}var t,n;return t=e,(n=[{key:"getInitialUser",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"setUser",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:n})}).then(B(this,R,U))}},{key:"setAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then(B(this,R,U))}},{key:"setCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:n})}).then(B(this,R,U))}},{key:"delCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"PUT",headers:{authorization:this._token}}).then(B(this,R,U))}},{key:"dislikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:{authorization:this._token}}).then(B(this,R,U))}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function U(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),x(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),x(this,"_closePopupByClick",(function(e){var t=e.target;(t.classList.contains("cross")||t.classList.contains("cross__img")||t===n._popup)&&n.close()})),this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add(h),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove(h),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("click",this._closePopupByClick)}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=z(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},J.apply(this,arguments)}function z(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}function H(e,t){return H=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},H(e,t)}function F(e,t){if(t&&("object"===N(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}var W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&H(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._form=t._popup.querySelector("form"),t}return t=u,(n=[{key:"setSubmitAction",value:function(e){this._submitHandlerDelete=e}},{key:"setEventListeners",value:function(){var e=this;J(M(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandlerDelete(t)}))}}])&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(){return Q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=X(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},Q.apply(this,arguments)}function X(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ee(e)););return e}function Y(e,t){return Y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Y(e,t)}function Z(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return $(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e){return ee=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ee(e)}function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Y(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ee(r);if(o){var n=ee(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Z(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),te($(n=i.call(this,e)),"_getInputValues",(function(){return n._formValues={},n._inputList.forEach((function(e){n._formValues[e.name]=e.value})),n._formValues})),te($(n),"setInputValues",(function(e){n._inputList.forEach((function(t){t.value=e[t.name]}))})),n._handleSubmitForm=t,n._inputList=n._popup.querySelectorAll(".popup__input"),n._form=n._popup.querySelector("form"),n._input=n._popup.querySelector(".popup__input"),n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;Q(ee(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmitForm(e._getInputValues())}))}},{key:"close",value:function(){Q(ee(u.prototype),"close",this).call(this),this._form.reset()}}])&&K(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function re(e){return re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},re(e)}function oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ie(){return ie="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=ue(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},ie.apply(this,arguments)}function ue(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=se(e)););return e}function ae(e,t){return ae=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ae(e,t)}function ce(e,t){if(t&&("object"===re(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function se(e){return se=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},se(e)}var le=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ae(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=se(r);if(o){var n=se(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ce(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImgPicture=t._popup.querySelector(".popup__img"),t._captionOfPopupImg=t._popup.querySelector(".popup__caption"),t}return t=u,(n=[{key:"open",value:function(e,t){this._popupImgPicture.src=e,this._popupImgPicture.alt=t,this._captionOfPopupImg.textContent=t,ie(se(u.prototype),"open",this).call(this)}}])&&oe(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(A);function fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var pe=function(){function e(t,n,r,o,i){var u=t.name,a=t.link,c=t._id,s=t.likes;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=u,this._link=a,this._id=c,this.likes=s,this._templateSelector=n,this.handleOpenBigImage=r,this.handleOpenPopupDelete=o,this.handleLike=i}var t,n;return t=e,(n=[{key:"_getCardElement",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".elements__element").cloneNode(!0)}},{key:"generateCard",value:function(){var e=this;return this._cardElement=this._getCardElement(),this.buttonLike=this._cardElement.querySelector(f),this._buttonDel=this._cardElement.querySelector(".elements__trash"),this.likeCounter=this._cardElement.querySelector(".elements__like-counter"),this.elImg=this._cardElement.querySelector(".elements__image"),this.elImg.src=this._link,this.elImg.alt=this._name,this._cardElement.querySelector(".elements__name").textContent=this._name,this._setEventListeners(),this.elImg.addEventListener("error",(function(t){e.elImg.src="https://camo.githubusercontent.com/2515d63ed9f010c45188fb16aa813f67c886fcb713f8395964abcbd22bd791ef/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f41394563427a64367438445a652f67697068792e676966"})),this._cardElement}},{key:"_setEventListeners",value:function(){var e=this;this._buttonDel.addEventListener("click",(function(t){return e._handleDeleteClick()})),this.buttonLike.addEventListener("click",(function(t){return e._toggleLike()})),this.elImg.addEventListener("click",(function(t){return e._handleImageClick()}))}},{key:"deleteCard",value:function(){this._cardElement.remove()}},{key:"getCardId",value:function(){return this._id}},{key:"_toggleLike",value:function(){this.handleLike(this),this.buttonLike.classList.toggle(p)}},{key:"_handleImageClick",value:function(){this.handleOpenBigImage(this._link,this._name)}},{key:"_handleDeleteClick",value:function(){this.handleOpenPopupDelete(this)}}])&&fe(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ye=function(){function e(t,n){var r,o,i=this,u=t.formSelector,a=t.inputSelector,c=t.submitButtonSelector,s=t.inactiveButtonClass,l=t.inputErrorClass,f=t.errorClass;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(){return i._inputList.some((function(e){return!e.validity.valid}))},(r="_hasInvalidInput")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[r]=o,this._formSelector=u,this._inputSelector=a,this._submitButtonSelector=c,this._inactiveButtonClass=s,this._inputErrorClass=l,this._errorClass=f,this._formEl=n}var t,n;return t=e,(n=[{key:"_showError",value:function(e,t){var n=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.classList.add(this._errorClass),n.textContent=t}},{key:"_hideError",value:function(e){var t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideError(e):this._showError(e,e.validationMessage)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this.enableButtonState()}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formEl.querySelectorAll(this._inputSelector)),this._buttonElement=this._formEl.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(n){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","disabled")}},{key:"enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}},{key:"hideErrors",value:function(){var e=this;this._inputList.forEach((function(t){e._hideError(t)}))}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&he(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function de(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _e=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._renderer(e)}))}},{key:"appendItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}}])&&de(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ve=function(){function e(t){var n=t.userNameSelector,r=t.userJobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameNode=document.querySelector(n),this._userJobNode=document.querySelector(r),this._userAvatar=document.querySelector(".profile__avatar")}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userName=this._userNameNode.textContent,this._userJob=this._userJobNode.textContent,this._userData={name:this._userName,about:this._userJob},this._userData}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;t&&(this._userNameNode.textContent=t),n&&(this._userJobNode.textContent=n)}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}}])&&be(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),me=new T;function ge(e){return new pe(e,"#card-template",we,Ce,ke).generateCard()}function ke(e){e.buttonLike.classList.contains(p)?me.dislikeCard(e.getCardId()).then((function(t){e.likeCounter.textContent=t.likes.length})).catch((function(e){console.log(e)})):me.likeCard(e.getCardId()).then((function(t){e.likeCounter.textContent=t.likes.length})).catch((function(e){console.log(e)}))}me.getInitialUser().then((function(e){Se.setUserInfo(e),Se.setUserAvatar(e.avatar);var t=e._id;me.getInitialCards().then((function(e){qe.renderItems(e);for(var n=L.querySelectorAll("li"),r=0;r<e.length;r++)n[r].querySelector("span").textContent=e[r].likes.length;function o(e){var n=[];return e.forEach((function(e){n.push(e._id)})),n.some((function(e){return e===t}))}for(var i=0;i<e.length;i++)e[i].owner._id!==t&&n[i].querySelector(".elements__trash").remove(),o(e[i].likes)&&n[i].querySelector(f).classList.add(p)})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}));var Se=new ve({userNameSelector:i,userJobSelector:u}),Ee=new le(c);function we(e,t){Ee.open(e,t)}Ee.setEventListeners();var Oe=new W(".popup_delete");function Ce(e){Oe.setSubmitAction((function(){me.delCard(e.getCardId()).then(Oe.close()).catch((function(e){console.log(e)})),e.deleteCard()})),Oe.open()}Oe.setEventListeners();var Pe=new ne(t,(function(e){q(!0,b,"Сохранение...","Сохранить"),me.setUser(e).then((function(e){Se.setUserInfo(e),Pe.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,b,"Сохранение...","Сохранить")}))}));Pe.setEventListeners();var je=new ne(s,(function(e){q(!0,m,"Сохранение...","Сохранить"),me.setAvatar(e.link).then((function(e){Se.setUserAvatar(e.avatar),je.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,m,"Сохранение...","Сохранить")}))}));je.setEventListeners();var Le=new ne(n,(function(e){q(!0,S,"Создание...","Создать"),me.setCard(e).then((function(e){qe.prependItem(ge(e)),Le.close()})).catch((function(e){console.log(e)})).finally((function(){q(!1,S,"Создание...","Создать")}))}));Le.setEventListeners();var qe=new _e({renderer:function(e){var t=ge(e);qe.appendItem(t)}},e),Ie=new ye(l,_);Ie.enableValidation();var Be=new ye(l,k);Be.enableValidation();var Re=new ye(l,v);Re.enableValidation(),w.addEventListener("click",(function(){Pe.open(),Pe.setInputValues(Se.getUserInfo()),Ie.hideErrors()})),E.addEventListener("click",(function(){je.open(),Re.hideErrors(),Re.disableButtonState()})),O.addEventListener("click",(function(){Le.open(),Be.hideErrors(),Be.disableButtonState()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQU8sSUFBTUEsRUFHRyxZQUhIQSxFQU1HLGlCQU5IQSxFQU9BLGNBUEFBLEVBU0UsdUJBVEZBLEVBVUQsb0JBVkNBLEVBZUUsaUJBZkZBLEVBZ0JPLHNCQWhCUEEsRUE2QlcsaUJBN0JYQSxFQWtDRCxlQWxDQ0EsRUFxQ0UsZ0JBS0ZDLEVBQW1CLENBQzlCQyxhQUFjLGVBQ2RDLGNBQWUsZ0JBQ2ZDLHFCQUFzQixpQkFDdEJDLG9CQUFxQix5QkFDckJDLGdCQUFpQiwwQkFDakJDLFdBQVksd0JBR0RDLEVBSUMseUJBSkRBLEVBTUosOEJBU0lDLEVBRUUsZUFpQkZDLEVBQU9DLFNBQVNDLGNBbkZyQixTQXFGS0MsRUFBZUgsRUFBS0UsY0FBY1osR0FDbENjLEVBQWNELEVBQWFELGNBQWNaLEdBQ3pDZSxFQUF1QkQsRUFBWUYsY0FBY1osR0FHakRnQixFQURjTixFQUFLRSxjQUFjWixHQUNSWSxjQXREeEIsdUJBdURESyxFQUFtQkQsRUFBV0osY0FBY1osR0FFNUNrQixFQUFZUixFQUFLRSxjQUFjWixHQUMvQm1CLEVBQVdELEVBQVVOLGNBQWNaLEdBQ25Db0IsRUFBaUJELEVBQVNQLGNBQWNaLEdBRXhDcUIsRUFBbUJYLEVBQUtFLGNBNURqQixtQkE2RFBVLEVBQWFaLEVBQUtFLGNBaEdqQix5QkFpR0RXLEVBQVliLEVBQUtFLGNBaEdqQix3QkFpR0FZLEVBQVdiLFNBQVNDLGNBQWNaLEdBR2xDeUIsR0FGa0JELEVBQVNaLGNBcEUxQixlQXFFbUJZLEVBQVNaLGNBcEUxQixtQkFxRWtCQyxFQUFhRCxjQUFjWixJQUtoRDBCLEdBSllELEVBQW1CYixjQTdGL0IsMkJBOEZXYSxFQUFtQmIsY0E3Ri9CLGdDQThGZUYsRUFBS0UsY0FBY1osR0FDZFUsRUFBS0UsY0FBY1osR0FDcEJrQixFQUFVTixjQUFjWixJQUkxQzJCLEdBSFdELEVBQWdCZCxjQTdGNUIsMkJBOEZZYyxFQUFnQmQsY0E3RjVCLDhCQThGcUJjLEVBQWdCZCxjQUFjWixHQUNqQ1UsRUFBS0UsY0FBY1osSUNqSDFDLFNBQVM0QixFQUFjQyxFQUFXQyxFQUFRQyxFQUFTQyxHQUV0REYsRUFBT0csWUFETEosRUFDbUJFLEVBRUFDLENBRXhCLEMsc1NDUG9CRSxFQUFBQSxXQVNuQixhLHFHQUFjLFMsbUhBQUEsSyxFQUFBLEcsU0FDWkMsS0FBS0MsT0FBUyx1Q0FDZEQsS0FBS0UsU0FBVyw2Q0FDakIsQyxtREFFRCxXQUNFLE9BQU9DLE1BQU0sR0FBRCxPQUFJSCxLQUFLRSxTQUFULGFBQThCLENBQ3hDRSxRQUFTLENBQ1BDLGNBQWVMLEtBQUtDLFVBRXJCSyxLQUpJLEVBSUNOLEtBSkQsS0FLUixHLDZCQUVELFdBQ0UsT0FBT0csTUFBTSxHQUFELE9BQUlILEtBQUtFLFNBQVQsVUFBMkIsQ0FDckNFLFFBQVMsQ0FDUEMsY0FBZUwsS0FBS0MsVUFFckJLLEtBSkksRUFJQ04sS0FKRCxLQUtSLEcscUJBRUQsWUFBeUIsSUFBZk8sRUFBZSxFQUFmQSxLQUFNQyxFQUFTLEVBQVRBLE1BQ2QsT0FBT0wsTUFBTSxHQUFELE9BQUlILEtBQUtFLFNBQVQsYUFBOEIsQ0FDeENPLE9BQVEsUUFDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxPQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJMLEtBQUFBLEVBQ0FDLE1BQUFBLE1BRURGLEtBVkksRUFVQ04sS0FWRCxLQVdSLEcsdUJBRUQsU0FBVWEsR0FDUixPQUFPVixNQUFNLEdBQUQsT0FBSUgsS0FBS0UsU0FBVCxvQkFBcUMsQ0FDL0NPLE9BQVEsUUFDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxPQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJDLE9BQVFBLE1BRVRQLEtBVEksRUFTQ04sS0FURCxLQVVSLEcscUJBRUQsWUFBd0IsSUFBZE8sRUFBYyxFQUFkQSxLQUFNTyxFQUFRLEVBQVJBLEtBQ2QsT0FBT1gsTUFBTSxHQUFELE9BQUlILEtBQUtFLFNBQVQsVUFBMkIsQ0FDckNPLE9BQVEsT0FDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxPQUNwQixlQUFnQixvQkFFbEJTLEtBQU1DLEtBQUtDLFVBQVUsQ0FDbkJMLEtBQUFBLEVBQ0FPLEtBQUFBLE1BRURSLEtBVkksRUFVQ04sS0FWRCxLQVdSLEcscUJBRUQsU0FBUWUsR0FDTixPQUFPWixNQUFNLEdBQUQsT0FBSUgsS0FBS0UsU0FBVCxrQkFBMkJhLEdBQU8sQ0FDNUNOLE9BQVEsU0FDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxVQUVyQkssS0FMSSxFQUtDTixLQUxELEtBTVIsRyxzQkFFRCxTQUFTZSxHQUNQLE9BQU9aLE1BQU0sR0FBRCxPQUFJSCxLQUFLRSxTQUFULGtCQUEyQmEsRUFBM0IsVUFBd0MsQ0FDbEROLE9BQVEsTUFDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxVQUVyQkssS0FMSSxFQUtDTixLQUxELEtBTVIsRyx5QkFFRCxTQUFZZSxHQUNWLE9BQU9aLE1BQU0sR0FBRCxPQUFJSCxLQUFLRSxTQUFULGtCQUEyQmEsRUFBM0IsVUFBd0MsQ0FDbEROLE9BQVEsU0FDUkwsUUFBUyxDQUNQQyxjQUFlTCxLQUFLQyxVQUVyQkssS0FMSSxFQUtDTixLQUxELEtBTVIsTSxzRUFoR2tCRCxHLFdBQ1BpQixHQUNWLE9BQUlBLEVBQUlDLEdBQ0NELEVBQUlFLE9BR05DLFFBQVFDLE9BQVIsa0JBQTBCSixFQUFJSyxRQUN0QyxDLGtTQ0xrQkMsRUFBQUEsV0FDbkIsV0FBWUMsR0FBZSxZLDRGQUFBLG1DQWNULFNBQUNDLEdBQ0QsV0FBWkEsRUFBSUMsS0FDTixFQUFLQyxPQUVSLElBbEIwQiw2QkF3Qk4sU0FBQ0YsR0FDcEIsSUFBTUcsRUFBU0gsRUFBSUcsUUFHakJBLEVBQU9DLFVBQVVDLFNIc0NkLFVHckNIRixFQUFPQyxVQUFVQyxTSHNDWCxlR3JDTkYsSUFBVyxFQUFLRyxTQUVoQixFQUFLSixPQUVSLElBakNDMUIsS0FBSzhCLE9BQVN0RCxTQUFTQyxjQUFjOEMsRUFDdEMsQyx5Q0FFRCxXQUNFdkIsS0FBSzhCLE9BQU9GLFVBQVVHLElBQUl6RCxHQUMxQkUsU0FBU3dELGlCQUFpQixVQUFXaEMsS0FBS2lDLGdCQUMzQyxHLG1CQUVELFdBQ0VqQyxLQUFLOEIsT0FBT0YsVUFBVU0sT0FBTzVELEdBQzdCRSxTQUFTMkQsb0JBQW9CLFVBQVduQyxLQUFLaUMsZ0JBQzlDLEcsK0JBUUQsV0FDRWpDLEtBQUs4QixPQUFPRSxpQkFBaUIsUUFBU2hDLEtBQUtvQyxtQkFDNUMsTSxzRUF2QmtCZCxHLHl3Q0NBQWUsRUFBQUEsU0FBQUEsSSw2ckJBQ25CLFdBQVlkLEdBQWUsYSw0RkFBQSxVQUN6QixjQUFNQSxJQUNEZSxNQUFRLEVBQUtSLE9BQU9yRCxjQUFjLFFBRmQsQ0FHMUIsQyw0Q0FFRCxTQUFnQjhELEdBQ2R2QyxLQUFLd0MscUJBQXVCRCxDQUM3QixHLCtCQUVELFdBQW9CLFdBQ2xCLHNEQUNBdkMsS0FBSzhCLE9BQU9FLGlCQUFpQixVQUFVLFNBQUNTLEdBQ3RDQSxFQUFNQyxpQkFDTixFQUFLRixxQkFBcUJDLEVBQzNCLEdBQ0YsTSxzRUFoQmtCSixDQUFvQmYsRyx5NENDRXBCcUIsR0FBQUEsU0FBQUEsSSwrckJBQ25CLFdBQVlwQixFQUFlcUIsR0FBa0IsYSw0RkFBQSxjQUMzQyxjQUFNckIsSUFEcUMsbUJBVzNCLFdBS2hCLE9BSkEsRUFBS3NCLFlBQWMsQ0FBQyxFQUNwQixFQUFLQyxXQUFXQyxTQUFRLFNBQUNDLEdBQ3ZCLEVBQUtILFlBQVlHLEVBQU16QyxNQUFReUMsRUFBTUMsS0FDdEMsSUFDTSxFQUFLSixXQUNiLElBakI0QywwQkFtQjVCLFNBQUNLLEdBQ2hCLEVBQUtKLFdBQVdDLFNBQVEsU0FBQ0MsR0FDdkJBLEVBQU1DLE1BQVFDLEVBQUtGLEVBQU16QyxLQUMxQixHQUNGLElBckJDLEVBQUs0QyxrQkFBb0JQLEVBQ3pCLEVBQUtFLFdBQWEsRUFBS2hCLE9BQU9zQixpQkx3RWpCLGlCS3JFYixFQUFLZCxNQUFRLEVBQUtSLE9BQU9yRCxjQUFjLFFBRXZDLEVBQUs0RSxPQUFTLEVBQUt2QixPQUFPckQsY0w4RGIsaUJLdEU4QixDQVM1QyxDLDhDQWdCRCxXQUFvQixXQUNsQix1REFDQXVCLEtBQUs4QixPQUFPRSxpQkFBaUIsVUFBVSxTQUFDUyxHQUN0Q0EsRUFBTUMsaUJBQ04sRUFBS1Msa0JBQWtCLEVBQUtHLGtCQUM3QixHQUNGLEcsbUJBRUQsV0FDRSwyQ0FDQXRELEtBQUtzQyxNQUFNaUIsT0FDWixNLHNFQXJDa0JaLENBQXNCckIsRywyeENDRHRCa0MsR0FBQUEsU0FBQUEsSSxpc0JBQ25CLFdBQVlqQyxHQUFlLGEsNEZBQUEsVUFDekIsY0FBTUEsSUFDRGtDLGlCQUFtQixFQUFLM0IsT0FBT3JELGNOd0QxQixlTXJEVixFQUFLaUYsbUJBQXFCLEVBQUs1QixPQUFPckQsY05zRDFCLG1CTTNEYSxDQVExQixDLGlDQUVELFNBQUtxQyxFQUFNUCxHQUNUUCxLQUFLeUQsaUJBQWlCRSxJQUFNN0MsRUFDNUJkLEtBQUt5RCxpQkFBaUJHLElBQU1yRCxFQUM1QlAsS0FBSzBELG1CQUFtQjVELFlBQWNTLEVBQ3RDLDBDQUNELE0sdUVBaEJrQmlELENBQXFCbEMsRywyS0NEckJ1QyxHQUFBQSxXQUNuQixhQUVFQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUNBLElBTEUxRCxFQUtGLEVBTEVBLEtBQU1PLEVBS1IsRUFMUUEsS0FBTUMsRUFLZCxFQUxjQSxJQUFLbUQsRUFLbkIsRUFMbUJBLE8sNEZBS25CLFNBQ0FsRSxLQUFLbUUsTUFBUTVELEVBQ2JQLEtBQUtvRSxNQUFRdEQsRUFDYmQsS0FBS2UsSUFBTUEsRUFDWGYsS0FBS2tFLE1BQVFBLEVBQ2JsRSxLQUFLcUUsa0JBQW9CUCxFQUN6QjlELEtBQUsrRCxtQkFBcUJBLEVBQzFCL0QsS0FBS2dFLHNCQUF3QkEsRUFDN0JoRSxLQUFLaUUsV0FBYUEsQ0FDbkIsQyxvREFFRCxXQU1FLE9BTG9CekYsU0FDakJDLGNBQWN1QixLQUFLcUUsbUJBQ25CQyxRQUFRN0YsY1A2QkEsc0JPNUJSOEYsV0FBVSxFQUdkLEcsMEJBRUQsV0FBZSxXQXVCYixPQXRCQXZFLEtBQUt3RSxhQUFleEUsS0FBS3lFLGtCQUN6QnpFLEtBQUswRSxXQUFhMUUsS0FBS3dFLGFBQWEvRixjQUNsQ0osR0FFRjJCLEtBQUsyRSxXQUFhM0UsS0FBS3dFLGFBQWEvRixjUHNCM0Isb0JPbkJUdUIsS0FBSzRFLFlBQWM1RSxLQUFLd0UsYUFBYS9GLGNQcUIxQiwyQk9sQlh1QixLQUFLNkUsTUFBUTdFLEtBQUt3RSxhQUFhL0YsY1BhbEIsb0JPWmJ1QixLQUFLNkUsTUFBTWxCLElBQU0zRCxLQUFLb0UsTUFDdEJwRSxLQUFLNkUsTUFBTWpCLElBQU01RCxLQUFLbUUsTUFDdEJuRSxLQUFLd0UsYUFBYS9GLGNQV04sbUJPWGtEcUIsWUFDNURFLEtBQUttRSxNQUNQbkUsS0FBSzhFLHFCQUVMOUUsS0FBSzZFLE1BQU03QyxpQkFBaUIsU0FBUyxTQUFDK0MsR0FDcEMsRUFBS0YsTUFBTWxCLElBQ1QsZ05BQ0gsSUFFTTNELEtBQUt3RSxZQUNiLEcsZ0NBRUQsV0FBcUIsV0FDbkJ4RSxLQUFLMkUsV0FBVzNDLGlCQUFpQixTQUFTLFNBQUMrQyxHQUFELE9BQU8sRUFBS0Msb0JBQVosSUFDMUNoRixLQUFLMEUsV0FBVzFDLGlCQUFpQixTQUFTLFNBQUMrQyxHQUFELE9BQU8sRUFBS0UsYUFBWixJQUMxQ2pGLEtBQUs2RSxNQUFNN0MsaUJBQWlCLFNBQVMsU0FBQytDLEdBQUQsT0FBTyxFQUFLRyxtQkFBWixHQUN0QyxHLHdCQUVELFdBQ0VsRixLQUFLd0UsYUFBYXRDLFFBQ25CLEcsdUJBRUQsV0FDRSxPQUFPbEMsS0FBS2UsR0FDYixHLHlCQUVELFdBQ0VmLEtBQUtpRSxXQUFXakUsTUFDaEJBLEtBQUswRSxXQUFXOUMsVUFBVXVELE9BQU85RyxFQUNsQyxHLCtCQUVELFdBQ0UyQixLQUFLK0QsbUJBQW1CL0QsS0FBS29FLE1BQU9wRSxLQUFLbUUsTUFDMUMsRyxnQ0FFRCxXQUNFbkUsS0FBS2dFLHNCQUFzQmhFLEtBQzVCLE0sdUVBOUVrQjZELEcsMktDRkF1QixHQUFBQSxXQUNuQixhQVNFQyxHQUNBLEksSUFBQSxPQVJFdEgsRUFRRixFQVJFQSxhQUNBQyxFQU9GLEVBUEVBLGNBQ0FDLEVBTUYsRUFORUEscUJBQ0FDLEVBS0YsRUFMRUEsb0JBQ0FDLEVBSUYsRUFKRUEsZ0JBQ0FDLEVBR0YsRUFIRUEsWSw0RkFHRixTLEVBb0NpQixXQUNqQixPQUFPLEVBQUswRSxXQUFXd0MsTUFBSyxTQUFDQyxHQUFELE9BQW1CQSxFQUFhQyxTQUFTQyxLQUF6QyxHQUM3QixHLEVBdENDLDJCLHNCQUFBLEssdURBQUEsSyxLQUNBekYsS0FBSzBGLGNBQWdCM0gsRUFDckJpQyxLQUFLMkYsZUFBaUIzSCxFQUN0QmdDLEtBQUs0RixzQkFBd0IzSCxFQUM3QitCLEtBQUs2RixxQkFBdUIzSCxFQUM1QjhCLEtBQUs4RixpQkFBbUIzSCxFQUN4QjZCLEtBQUsrRixZQUFjM0gsRUFDbkI0QixLQUFLZ0csUUFBVVgsQ0FDaEIsQywrQ0FFRCxTQUFXRSxFQUFjVSxHQUN2QixJQUFNQyxFQUFlbEcsS0FBS2dHLFFBQVF2SCxjQUFiLFdBQ2Y4RyxFQUFhWSxHQURFLFdBR3JCWixFQUFhM0QsVUFBVUcsSUFBSS9CLEtBQUs4RixrQkFDaENJLEVBQWF0RSxVQUFVRyxJQUFJL0IsS0FBSytGLGFBQ2hDRyxFQUFhcEcsWUFBY21HLENBQzVCLEcsd0JBRUQsU0FBV1YsR0FDVCxJQUFNVyxFQUFlbEcsS0FBS2dHLFFBQVF2SCxjQUFiLFdBQ2Y4RyxFQUFhWSxHQURFLFdBR3JCWixFQUFhM0QsVUFBVU0sT0FBT2xDLEtBQUs4RixrQkFDbkNJLEVBQWF0RSxVQUFVTSxPQUFPbEMsS0FBSytGLGFBQ25DRyxFQUFhcEcsWUFBYyxFQUM1QixHLGlDQUVELFNBQW9CeUYsR0FDZEEsRUFBYUMsU0FBU0MsTUFDeEJ6RixLQUFLb0csV0FBV2IsR0FFaEJ2RixLQUFLcUcsV0FBV2QsRUFBY0EsRUFBYWUsa0JBRTlDLEcsZ0NBTUQsV0FDTXRHLEtBQUt1RyxtQkFDUHZHLEtBQUt3RyxxQkFFTHhHLEtBQUt5RyxtQkFFUixHLGdDQUVELFdBQXFCLFdBQ25CekcsS0FBSzhDLFdBQWE0RCxNQUFNQyxLQUN0QjNHLEtBQUtnRyxRQUFRNUMsaUJBQWlCcEQsS0FBSzJGLGlCQUVyQzNGLEtBQUs0RyxlQUFpQjVHLEtBQUtnRyxRQUFRdkgsY0FDakN1QixLQUFLNEYsdUJBR1A1RixLQUFLNkcscUJBRUw3RyxLQUFLOEMsV0FBV0MsU0FBUSxTQUFDd0MsR0FDdkJBLEVBQWF2RCxpQkFBaUIsU0FBUyxTQUFDK0MsR0FDdEMsRUFBSytCLG9CQUFvQnZCLEdBQ3pCLEVBQUtzQixvQkFDTixHQUNGLEdBQ0YsRyxnQ0FFRCxXQUNFN0csS0FBSzRHLGVBQWVoRixVQUFVRyxJQUFJL0IsS0FBSzZGLHNCQUN2QzdGLEtBQUs0RyxlQUFlRyxhQUFhLFdBQVksV0FDOUMsRywrQkFFRCxXQUNFL0csS0FBSzRHLGVBQWVoRixVQUFVTSxPQUFPbEMsS0FBSzZGLHNCQUMxQzdGLEtBQUs0RyxlQUFlSSxnQkFBZ0IsV0FDckMsRyx3QkFHRCxXQUFhLFdBQ1hoSCxLQUFLOEMsV0FBV0MsU0FBUSxTQUFDd0MsR0FDdkIsRUFBS2EsV0FBV2IsRUFDakIsR0FDRixHLDhCQUVELFdBQ0V2RixLQUFLZ0csUUFBUWhFLGlCQUFpQixVQUFVLFNBQVVSLEdBQ2hEQSxFQUFJa0IsZ0JBQ0wsSUFDRDFDLEtBQUs4RSxvQkFDTixNLHVFQW5Ha0JNLEcsMktDQUE2QixHQUFBQSxXQUNuQixhQUEwQkMsR0FBVSxJQUF0QkMsRUFBc0IsRUFBdEJBLFUsNEZBQXNCLFNBQ2xDbkgsS0FBS29ILFVBQVlELEVBRWpCbkgsS0FBS3FILFdBQWE3SSxTQUFTQyxjQUFjeUksRUFDMUMsQyxnREFFRCxTQUFZSSxHQUFPLFdBQ2pCQSxFQUFNdkUsU0FBUSxTQUFDd0UsR0FBRCxPQUFVLEVBQUtILFVBQVVHLEVBQXpCLEdBQ2YsRyx3QkFFRCxTQUFXQyxHQUNUeEgsS0FBS3FILFdBQVdJLE9BQU9ELEVBQ3hCLEcseUJBRUQsU0FBWUEsR0FDVnhILEtBQUtxSCxXQUFXSyxRQUFRRixFQUN6QixNLHVFQWpCa0JQLEcsMktDRUFVLEdBQUFBLFdBQ25CLGNBQW1ELElBQXJDQyxFQUFxQyxFQUFyQ0EsaUJBQWtCQyxFQUFtQixFQUFuQkEsaUIsNEZBQW1CLFNBQ2pEN0gsS0FBSzhILGNBQWdCdEosU0FBU0MsY0FBY21KLEdBQzVDNUgsS0FBSytILGFBQWV2SixTQUFTQyxjQUFjb0osR0FDM0M3SCxLQUFLZ0ksWUFBY3hKLFNBQVNDLGNWb0VsQixtQlVuRVgsQyxnREFFRCxXQVFFLE9BUEF1QixLQUFLaUksVUFBWWpJLEtBQUs4SCxjQUFjaEksWUFDcENFLEtBQUtrSSxTQUFXbEksS0FBSytILGFBQWFqSSxZQUNsQ0UsS0FBS21JLFVBQVksQ0FDZjVILEtBQU1QLEtBQUtpSSxVQUNYekgsTUFBT1IsS0FBS2tJLFVBR1BsSSxLQUFLbUksU0FDYixHLHlCQUVELFlBQTZCLElBQWY1SCxFQUFlLEVBQWZBLEtBQU1DLEVBQVMsRUFBVEEsTUFDZEQsSUFDRlAsS0FBSzhILGNBQWNoSSxZQUFjUyxHQUUvQkMsSUFDRlIsS0FBSytILGFBQWFqSSxZQUFjVSxFQUVuQyxHLDJCQUVELFNBQWNNLEdBQ1pkLEtBQUtnSSxZQUFZckUsSUFBTTdDLENBQ3hCLE0sdUVBN0JrQjZHLEdDNEJmUyxHQUFNLElBQUlySSxFQXdEaEIsU0FBU3NJLEdBQVdkLEdBU2xCLE9BUmEsSUFBSTFELEdBQ2YwRCxFWHZGWSxpQld5Rlp4RCxHQUNBQyxHQUNBQyxJQUV1QnFFLGNBRTFCLENBR0QsU0FBU3JFLEdBQVdzRSxHQUNkQSxFQUFLN0QsV0FBVzlDLFVBQVVDLFNBQVN4RCxHQUNyQytKLEdBQ0dJLFlBQVlELEVBQUtFLGFBQ2pCbkksTUFBSyxTQUFDb0ksR0FDTEgsRUFBSzNELFlBQVk5RSxZQUFjNEksRUFBT3hFLE1BQU15RSxNQUM3QyxJQUNBQyxPQUFNLFNBQUNDLEdBQ05DLFFBQVFDLElBQUlGLEVBQ2IsSUFFSFQsR0FDR1ksU0FBU1QsRUFBS0UsYUFDZG5JLE1BQUssU0FBQ29JLEdBQ0xILEVBQUszRCxZQUFZOUUsWUFBYzRJLEVBQU94RSxNQUFNeUUsTUFDN0MsSUFDQUMsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRixFQUNiLEdBRU4sQ0F0RkRULEdBQ0dhLGlCQUNBM0ksTUFBSyxTQUFDb0ksR0FDTFEsR0FBS0MsWUFBWVQsR0FDakJRLEdBQUtFLGNBQWNWLEVBQU83SCxRQUMxQixJQUFNd0ksRUFBU1gsRUFBTzNILElBR3RCcUgsR0FDR2tCLGtCQUNBaEosTUFBSyxTQUFDb0ksR0FDTGEsR0FBVUMsWUFBWWQsR0FFdEIsSUFEQSxJQUFNZSxFQUFnQmpLLEVBQWU0RCxpQkFBaUIsTUFDN0NzRyxFQUFJLEVBQUdBLEVBQUloQixFQUFPQyxPQUFRZSxJQUNqQ0QsRUFBY0MsR0FBR2pMLGNBQWMsUUFBUXFCLFlBQ3JDNEksRUFBT2dCLEdBQUd4RixNQUFNeUUsT0FJcEIsU0FBU2dCLEVBQVFDLEdBQ2YsSUFBTUMsRUFBaUIsR0FPdkIsT0FOQUQsRUFBTTdHLFNBQVEsU0FBQ3lFLEdBQ2JxQyxFQUFlQyxLQUFLdEMsRUFBUXpHLElBQzdCLElBQ3NCOEksRUFBZXZFLE1BQ3BDLFNBQUNrQyxHQUFELE9BQWFBLElBQVk2QixDQUF6QixHQUdILENBRUQsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUloQixFQUFPQyxPQUFRZSxJQUU3QmhCLEVBQU9nQixHQUFHSyxNQUFNaEosTUFBUXNJLEdBQzFCSSxFQUFjQyxHQUFHakwsY0FBYyxvQkFBb0J5RCxTQUdqRHlILEVBQVFqQixFQUFPZ0IsR0FBR3hGLFFBQ3BCdUYsRUFBY0MsR0FDWGpMLGNBQWNKLEdBQ2R1RCxVQUFVRyxJQUFJMUQsRUFHdEIsSUFDQXVLLE9BQU0sU0FBQ0MsR0FDTkMsUUFBUUMsSUFBSUYsRUFDYixHQUVKLElBQ0FELE9BQU0sU0FBQ0MsR0FDTkMsUUFBUUMsSUFBSUYsRUFDYixJQXVDSCxJQUFNSyxHQUFPLElBQUl2QixHQUFTLENBQ3hCQyxpQkFBa0IvSixFQUNsQmdLLGdCQUFpQmhLLElBS2JtTSxHQUFlLElBQUl4RyxHQUFhM0YsR0FFdEMsU0FBU2tHLEdBQW1CakQsRUFBTVAsR0FDaEN5SixHQUFhQyxLQUFLbkosRUFBTVAsRUFDekIsQ0FIRHlKLEdBQWFFLG9CQUtiLElBQU1DLEdBQWMsSUFBSTlILEVYdEdULGlCV3dHZixTQUFTMkIsR0FBc0J1RSxHQUM3QjRCLEdBQVlDLGlCQUFnQixXQUMxQmhDLEdBQ0dpQyxRQUFROUIsRUFBS0UsYUFDYm5JLEtBQUs2SixHQUFZekksU0FDakJrSCxPQUFNLFNBQUNDLEdBQ05DLFFBQVFDLElBQUlGLEVBQ2IsSUFDSE4sRUFBSytCLFlBQ04sSUFDREgsR0FBWUYsTUFDYixDQVpERSxHQUFZRCxvQkFlWixJQUFNSyxHQUF1QixJQUFJNUgsR0FDL0I5RSxHQUNBLFNBQUNxRixHQUNDekQsR0FBYyxFQUFNYixFQUFzQixnQkFBaUIsYUFDM0R3SixHQUNHb0MsUUFBUXRILEdBQ1I1QyxNQUFLLFNBQUNvSSxHQUNMUSxHQUFLQyxZQUFZVCxHQUNqQjZCLEdBQXFCN0ksT0FDdEIsSUFDQWtILE9BQU0sU0FBQ0MsR0FDTkMsUUFBUUMsSUFBSUYsRUFDYixJQUNBNEIsU0FBUSxXQUNQaEwsR0FDRSxFQUNBYixFQUNBLGdCQUNBLFlBRUgsR0FDSixJQUVIMkwsR0FBcUJMLG9CQUdyQixJQUFNUSxHQUFjLElBQUkvSCxHQUFjOUUsR0FBdUIsU0FBQ3FGLEdBQzVEekQsR0FBYyxFQUFNWCxFQUFrQixnQkFBaUIsYUFDdkRzSixHQUNHdUMsVUFBVXpILEVBQUtwQyxNQUNmUixNQUFLLFNBQUNvSSxHQUNMUSxHQUFLRSxjQUFjVixFQUFPN0gsUUFDMUI2SixHQUFZaEosT0FDYixJQUNBa0gsT0FBTSxTQUFDQyxHQUNOQyxRQUFRQyxJQUFJRixFQUNiLElBQ0E0QixTQUFRLFdBQ1BoTCxHQUFjLEVBQU9YLEVBQWtCLGdCQUFpQixZQUN6RCxHQUNKLElBQ0Q0TCxHQUFZUixvQkFHWixJQUFNVSxHQUFvQixJQUFJakksR0FBYzlFLEdBQXFCLFNBQUNxRixHQUNoRXpELEdBQWMsRUFBTVIsRUFBZ0IsY0FBZSxXQUNuRG1KLEdBQ0d5QyxRQUFRM0gsR0FDUjVDLE1BQUssU0FBQ29JLEdBQ0xhLEdBQVV1QixZQUFZekMsR0FBV0ssSUFDakNrQyxHQUFrQmxKLE9BQ25CLElBQ0FrSCxPQUFNLFNBQUNDLEdBQ05DLFFBQVFDLElBQUlGLEVBQ2IsSUFDQTRCLFNBQVEsV0FDUGhMLEdBQWMsRUFBT1IsRUFBZ0IsY0FBZSxVQUNyRCxHQUNKLElBQ0QyTCxHQUFrQlYsb0JBR2xCLElBQU1YLEdBQVksSUFBSXRDLEdBQ3BCLENBQ0VFLFNBQVUsU0FBQ0ksR0FDVCxJQUFNd0QsRUFBYzFDLEdBQVdkLEdBQy9CZ0MsR0FBVXlCLFdBQVdELEVBQ3RCLEdBRUhsTixHQUlJb04sR0FBdUIsSUFBSTdGLEdBQWN0SCxFQUFrQmEsR0FDakVzTSxHQUFxQkMsbUJBQ3JCLElBQU1DLEdBQW9CLElBQUkvRixHQUFjdEgsRUFBa0JrQixHQUM5RG1NLEdBQWtCRCxtQkFDbEIsSUFBTUUsR0FBc0IsSUFBSWhHLEdBQWN0SCxFQUFrQmUsR0FDaEV1TSxHQUFvQkYsbUJBR3BCL0wsRUFBVzZDLGlCQUFpQixTQUFTLFdBQ25DdUksR0FBcUJOLE9BQ3JCTSxHQUFxQmMsZUFBZW5DLEdBQUtvQyxlQUN6Q0wsR0FBcUJNLFlBQ3RCLElBR0RyTSxFQUFpQjhDLGlCQUFpQixTQUFTLFdBQ3pDMEksR0FBWVQsT0FDWm1CLEdBQW9CRyxhQUNwQkgsR0FBb0I1RSxvQkFDckIsSUFHRHBILEVBQVU0QyxpQkFBaUIsU0FBUyxXQUNsQzRJLEdBQWtCWCxPQUNsQmtCLEdBQWtCSSxhQUNsQkosR0FBa0IzRSxvQkFDbkIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBEZWxldGUuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUGljdHVyZVBvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNlbGVjdG9ycyA9IHtcclxuICBjYXJkVGVtcGxhdGU6IFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICBwYWdlOiBcIi5wYWdlXCIsXHJcbiAgY2FyZEVsZW1lbnRzOiBcIi5lbGVtZW50c1wiLFxyXG4gIGVkaXRCdXR0b246IFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIsXHJcbiAgYWRkQnV0dG9uOiBcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIsXHJcbiAgcG9wdXBQcm9maWxlOiBcIi5wb3B1cF9wcm9maWxlXCIsXHJcbiAgcG9wdXBDYXJkOiBcIi5wb3B1cF9jYXJkXCIsXHJcbiAgZm9ybUVsZW1lbnQ6IFwiLnBvcHVwX19jb250YWluZXJcIixcclxuICBmb3JtUHJvZmlsZTogXCIucG9wdXBfX2Zvcm1fcHJvZmlsZVwiLFxyXG4gIGZvcm1DYXJkOiBcIi5wb3B1cF9fZm9ybV9jYXJkXCIsXHJcbiAgZm9ybUNhcmROYW1lRXJyb3I6IFwiLmNhcmQtbmFtZS1pbnB1dC1lcnJvclwiLFxyXG4gIGZvcm1DYXJkTGlua0Vycm9yOiBcIi5jYXJkLWFkZHJlc3MtaW5wdXQtZXJyb3JcIixcclxuICBuYW1lSW5wdXQ6IFwiLnBvcHVwX19pbnB1dF91c2VyX25hbWVcIixcclxuICBqb2JJbnB1dDogXCIucG9wdXBfX2lucHV0X3VzZXJfY2hhcmFjdGVyXCIsXHJcbiAgcHJvZmlsZU5hbWU6IFwiLnByb2ZpbGVfX25hbWVcIixcclxuICBwcm9maWxlQ2hhcmFjdGVyOiBcIi5wcm9maWxlX19jaGFyYWN0ZXJcIixcclxuICBmb3JtRWxlbWVudENhcmQ6IFwiLnBvcHVwX19jb250YWluZXJcIixcclxuICBuYW1lQ2FyZDogXCIucG9wdXBfX2lucHV0X2NhcmRfbmFtZVwiLFxyXG4gIGxpbmtDYXJkOiBcIi5wb3B1cF9faW5wdXRfY2FyZF9hZGRyZXNzXCIsXHJcbiAgcG9wdXA6IFwiLnBvcHVwXCIsXHJcbiAgcG9wdXBPcGVuZWQ6IFwicG9wdXBfb3BlbmVkXCIsXHJcbiAgcG9wdXBPcGVuZWRDbGFzczogXCIucG9wdXBfb3BlbmVkXCIsXHJcbiAgY3Jvc3M6IFwiY3Jvc3NcIixcclxuICBjcm9zc0ltZzogXCJjcm9zc19faW1nXCIsXHJcbiAgZWxlbWVudHNJbWFnZUNsYXNzOiBcImVsZW1lbnRzX19pbWFnZVwiLFxyXG4gIGVsZW1lbnRzVHJhc2hDbGFzczogXCJlbGVtZW50c19fdHJhc2hcIixcclxuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl92aXNpYmxlXCIsXHJcbiAgcG9wdXBEZWxldGU6IFwiLnBvcHVwX2RlbGV0ZVwiLFxyXG4gIHBvcHVwSW1nOiBcIi5wb3B1cF9pbWFnZVwiLFxyXG4gIHBvcHVwSW1hZ2U6IFwiLnBvcHVwX19pbWdcIixcclxuICBwb3B1cENhcHRpb246IFwiLnBvcHVwX19jYXB0aW9uXCIsXHJcbiAgcG9wdXBBdmF0YXI6IFwiLnBvcHVwX2F2YXRhclwiLFxyXG4gIGF2YXRhckZvcm06IFwiLnBvcHVwX19mb3JtX2F2YXRhclwiLFxyXG4gIGF2YXRhckVkaXRCdXR0b246IFwiLnByb2ZpbGVfX2NvdmVyXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbk9iamVjdCA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0b3JzT2ZDYXJkID0ge1xyXG4gIGNhcmRFbGVtZW50OiBcIi5lbGVtZW50c19fZWxlbWVudFwiLFxyXG4gIGVsZW1lbnRzSW1hZ2U6IFwiLmVsZW1lbnRzX19pbWFnZVwiLFxyXG4gIGVsZW1lbnRzTmFtZTogXCIuZWxlbWVudHNfX25hbWVcIixcclxuICBidXR0b25MaWtlOiBcIi5lbGVtZW50c19fbGlrZS1idXR0b25cIixcclxuICBidXR0b25EZWw6IFwiLmVsZW1lbnRzX190cmFzaFwiLFxyXG4gIGxpa2VkOiBcImVsZW1lbnRzX19saWtlLWJ1dHRvbl9saWtlZFwiLFxyXG4gIGxpa2VDb3VudGVyOiBcIi5lbGVtZW50c19fbGlrZS1jb3VudGVyXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcGljdHVyZVBvcHVwU2VsZWN0b3JzID0ge1xyXG4gIHBvcHVwSW1hZ2U6IFwiLnBvcHVwX19pbWdcIixcclxuICBwb3B1cENhcHRpb246IFwiLnBvcHVwX19jYXB0aW9uXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcG9wdXBTZWxlY3RvcnMgPSB7XHJcbiAgcG9wdXA6IFwiLnBvcHVwXCIsXHJcbiAgcG9wdXBPcGVuZWQ6IFwicG9wdXBfb3BlbmVkXCIsXHJcbiAgY3Jvc3M6IFwiY3Jvc3NcIixcclxuICBjcm9zc0ltZzogXCJjcm9zc19faW1nXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcG9wdXBBdmF0YXJTZWxlY3RvcnMgPSB7XHJcbiAgdXNlckF2YXRhcjogXCIucHJvZmlsZV9fYXZhdGFyXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcG9wdXBXaXRoRm9ybVNlbGVjdG9ycyA9IHtcclxuICBwb3B1cFByb2ZpbGU6IFwiLnBvcHVwX3Byb2ZpbGVcIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5wb3B1cF9faW5wdXRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnBhZ2UpOyAvLyDQmtC+0L3RgtC10LnQvdC10YAg0YHRgtGA0LDQvdC40YbRi1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVwUHJvZmlsZSA9IHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMucG9wdXBQcm9maWxlKTsgLy8g0L/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC/0YDQvtGE0LjQu9GPXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRm9ybSA9IHBvcHVwUHJvZmlsZS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5mb3JtUHJvZmlsZSk7IC8vINCk0L7RgNC80LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9GA0L7RhNC40LvRj1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUJ1dHRvbkVsZW1lbnQgPSBwcm9maWxlRm9ybS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7IC8vINC60L3QvtC/0LrQsCDQvtGC0L/RgNCw0LLQutC4INC/0YDQvtGE0LjQu9GPXHJcblxyXG5leHBvcnQgY29uc3QgYXZhdGFyUG9wdXAgPSByb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnBvcHVwQXZhdGFyKTsgLy8g0J/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINCw0LLQsNGC0LDRgNCwXHJcbmV4cG9ydCBjb25zdCBhdmF0YXJGb3JtID0gYXZhdGFyUG9wdXAucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuYXZhdGFyRm9ybSk7IC8vINCk0L7RgNC80LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQsNCy0LDRgtCw0YDQsFxyXG5leHBvcnQgY29uc3QgYXZhdGFyRm9ybUJ1dHRvbiA9IGF2YXRhckZvcm0ucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuc3VibWl0QnV0dG9uU2VsZWN0b3IpOyAvLyDQmtC90L7Qv9C60LAg0L7RgtC/0YDQsNCy0LrQuCDQsNCy0LDRgtCw0YDQsFxyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVwQ2FyZCA9IHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMucG9wdXBDYXJkKTsgLy8g0L/QvtC/0LDQvyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmV4cG9ydCBjb25zdCBjYXJkRm9ybSA9IHBvcHVwQ2FyZC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5mb3JtQ2FyZCk7IC8vINCk0L7RgNC80LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxyXG5leHBvcnQgY29uc3QgY2FyZEZvcm1CdXR0b24gPSBjYXJkRm9ybS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7IC8vINCa0L3QvtC/0LrQsCDQvtGC0L/RgNCw0LLQutC4INC60LDRgNGC0L7Rh9C60LhcclxuXHJcbmV4cG9ydCBjb25zdCBidXR0b25BdmF0YXJFZGl0ID0gcm9vdC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5hdmF0YXJFZGl0QnV0dG9uKTsgLy8g0LrQvdC+0L/QutCwINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LDQstCw0YLQsNGA0LBcclxuZXhwb3J0IGNvbnN0IGJ1dHRvbkVkaXQgPSByb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLmVkaXRCdXR0b24pOyAvLyDQutC90L7Qv9C60LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9GA0L7RhNC40LvRj1xyXG5leHBvcnQgY29uc3QgYnV0dG9uQWRkID0gcm9vdC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5hZGRCdXR0b24pOyAvLyDQutC90L7Qv9C60LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxyXG5leHBvcnQgY29uc3QgcG9wdXBJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5wb3B1cEltZyk7IC8vINC/0L7Qv9Cw0L8g0LrQsNGA0YLQuNC90LrQuFxyXG5leHBvcnQgY29uc3QgcG9wdXBJbWdQaWN0dXJlID0gcG9wdXBJbWcucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMucG9wdXBJbWFnZSk7IC8vINGB0LDQvNCwINC60LDRgNGC0LjQvdC60LBcclxuZXhwb3J0IGNvbnN0IGNhcHRpb25PZlBvcHVwSW1nID0gcG9wdXBJbWcucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMucG9wdXBDYXB0aW9uKTsgLy8g0L/QvtC00L/QuNGB0Ywg0LrQsNGA0YLQuNC90LrQuFxyXG5leHBvcnQgY29uc3QgZm9ybUVsZW1lbnRQcm9maWxlID0gcG9wdXBQcm9maWxlLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLmZvcm1Qcm9maWxlKTsgLy8g0KTQvtGA0LzQsCDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC/0YDQvtGE0LjQu9GPXHJcbmV4cG9ydCBjb25zdCBuYW1lSW5wdXQgPSBmb3JtRWxlbWVudFByb2ZpbGUucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMubmFtZUlucHV0KTsgLy8g0J3QsNGF0L7QtNC40Lwg0L/QvtC70Y8g0YTQvtGA0LzRi1xyXG5leHBvcnQgY29uc3Qgam9iSW5wdXQgPSBmb3JtRWxlbWVudFByb2ZpbGUucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuam9iSW5wdXQpOyAvLyDQndCw0YXQvtC00LjQvCDQv9C+0LvRjyDRhNC+0YDQvNGLXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZSA9IHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMucHJvZmlsZU5hbWUpOyAvLyDQndCw0YXQvtC00LjQvCDRjdC70LXQvNC10L3RgtGLLCDQvtGC0LrRg9C00LAg0LTQvtC70LbQvdGLINCx0YvRgtGMINCy0YHRgtCw0LLQu9C10L3RiyDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9C10LlcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVDaGFyYWN0ZXIgPSByb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnByb2ZpbGVDaGFyYWN0ZXIpOyAvLyDQndCw0YXQvtC00LjQvCDRjdC70LXQvNC10L3RgtGLLCDQvtGC0LrRg9C00LAg0LTQvtC70LbQvdGLINCx0YvRgtGMINCy0YHRgtCw0LLQu9C10L3RiyDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9C10LlcclxuZXhwb3J0IGNvbnN0IGZvcm1FbGVtZW50Q2FyZCA9IHBvcHVwQ2FyZC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5mb3JtQ2FyZCk7IC8vINCk0L7RgNC80LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxyXG5leHBvcnQgY29uc3QgbmFtZUNhcmQgPSBmb3JtRWxlbWVudENhcmQucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMubmFtZUNhcmQpOyAvLyDQndCw0YXQvtC00LjQvCDQv9C+0LvRjyDRhNC+0YDQvNGLINC00L7QsdCw0LLQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60LhcclxuZXhwb3J0IGNvbnN0IGxpbmtDYXJkID0gZm9ybUVsZW1lbnRDYXJkLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLmxpbmtDYXJkKTsgLy8g0J3QsNGF0L7QtNC40Lwg0L/QvtC70Y8g0YTQvtGA0LzRiyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmV4cG9ydCBjb25zdCBjYXJkQnV0dG9uRWxlbWVudCA9IGZvcm1FbGVtZW50Q2FyZC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7IC8vINCd0LDRhdC+0LTQuNC8INC60L3QvtC/0LrRgyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmV4cG9ydCBjb25zdCBjYXJkc0NvbnRhaW5lciA9IHJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuY2FyZEVsZW1lbnRzKTsgLy8g0JrQvtC90YLQtdC50L3QtdGAINC60LDRgNGC0L7Rh9C10LpcclxuIiwiLy8g0KPQu9GD0YfRiNC10L3QuNC1IFVYXHJcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJMb2FkaW5nKGlzTG9hZGluZywgYnV0dG9uLCB0ZXh0aW5nLCB0ZXh0KSB7XHJcbiAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dGluZztcclxuICB9IGVsc2Uge1xyXG4gICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gICNpc1NlcnZlck9rKHJlcykge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fdG9rZW4gPSBcImVhY2RjYWQ4LWI3YmUtNGI5NS1hNjhkLWQ1YmU4ZDE5MzEwN1wiO1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IFwiaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC01MVwiO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbFVzZXIoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4odGhpcy4jaXNTZXJ2ZXJPayk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4odGhpcy4jaXNTZXJ2ZXJPayk7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyKHsgbmFtZSwgYWJvdXQgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX3Rva2VuLFxyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBhYm91dCxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKHRoaXMuI2lzU2VydmVyT2spO1xyXG4gIH1cclxuXHJcbiAgc2V0QXZhdGFyKGF2YXRhcikge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcjogYXZhdGFyLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4odGhpcy4jaXNTZXJ2ZXJPayk7XHJcbiAgfVxyXG5cclxuICBzZXRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKHRoaXMuI2lzU2VydmVyT2spO1xyXG4gIH1cclxuXHJcbiAgZGVsQ2FyZChfaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke19pZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246IHRoaXMuX3Rva2VuLFxyXG4gICAgICB9LFxyXG4gICAgfSkudGhlbih0aGlzLiNpc1NlcnZlck9rKTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKF9pZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7X2lkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sXHJcbiAgICAgIH0sXHJcbiAgICB9KS50aGVuKHRoaXMuI2lzU2VydmVyT2spO1xyXG4gIH1cclxuXHJcbiAgZGlzbGlrZUNhcmQoX2lkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtfaWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiB0aGlzLl90b2tlbixcclxuICAgICAgfSxcclxuICAgIH0pLnRoZW4odGhpcy4jaXNTZXJ2ZXJPayk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IHBvcHVwU2VsZWN0b3JzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKHBvcHVwU2VsZWN0b3JzLnBvcHVwT3BlbmVkKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShwb3B1cFNlbGVjdG9ycy5wb3B1cE9wZW5lZCk7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fY2xvc2VQb3B1cEJ5Q2xpY2spO1xyXG4gIH1cclxuXHJcbiAgX2Nsb3NlUG9wdXBCeUNsaWNrID0gKGV2dCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMocG9wdXBTZWxlY3RvcnMuY3Jvc3MpIHx8XHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMocG9wdXBTZWxlY3RvcnMuY3Jvc3NJbWcpIHx8XHJcbiAgICAgIHRhcmdldCA9PT0gdGhpcy5fcG9wdXBcclxuICAgICkge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwRGVsZXRlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCJmb3JtXCIpO1xyXG4gIH1cclxuXHJcbiAgc2V0U3VibWl0QWN0aW9uKGFjdGlvbikge1xyXG4gICAgdGhpcy5fc3VibWl0SGFuZGxlckRlbGV0ZSA9IGFjdGlvbjtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXJEZWxldGUoZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5pbXBvcnQgeyBwb3B1cEF2YXRhclNlbGVjdG9ycyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IHsgcG9wdXBXaXRoRm9ybVNlbGVjdG9ycyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0Rm9ybSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtID0gaGFuZGxlU3VibWl0Rm9ybTtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIHBvcHVwV2l0aEZvcm1TZWxlY3RvcnMuaW5wdXRTZWxlY3RvclxyXG4gICAgKTtcclxuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IocG9wdXBBdmF0YXJTZWxlY3RvcnMuaW5wdXRTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9mb3JtVmFsdWVzID0ge307XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgdGhpcy5fZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5fZm9ybVZhbHVlcztcclxuICB9O1xyXG5cclxuICBzZXRJbnB1dFZhbHVlcyA9IChkYXRhKSA9PiB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fZm9ybS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuaW1wb3J0IHsgcGljdHVyZVBvcHVwU2VsZWN0b3JzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGljdHVyZVBvcHVwIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBJbWdQaWN0dXJlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcclxuICAgICAgcGljdHVyZVBvcHVwU2VsZWN0b3JzLnBvcHVwSW1hZ2VcclxuICAgICk7XHJcbiAgICB0aGlzLl9jYXB0aW9uT2ZQb3B1cEltZyA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIHBpY3R1cmVQb3B1cFNlbGVjdG9ycy5wb3B1cENhcHRpb25cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvcGVuKGxpbmssIG5hbWUpIHtcclxuICAgIHRoaXMuX3BvcHVwSW1nUGljdHVyZS5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5fcG9wdXBJbWdQaWN0dXJlLmFsdCA9IG5hbWU7XHJcbiAgICB0aGlzLl9jYXB0aW9uT2ZQb3B1cEltZy50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IHNlbGVjdG9yc09mQ2FyZCB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHsgbmFtZSwgbGluaywgX2lkLCBsaWtlcyB9LFxuICAgIHRlbXBsYXRlU2VsZWN0b3IsXG4gICAgaGFuZGxlT3BlbkJpZ0ltYWdlLFxuICAgIGhhbmRsZU9wZW5Qb3B1cERlbGV0ZSxcbiAgICBoYW5kbGVMaWtlXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xuICAgIHRoaXMuX2lkID0gX2lkO1xuICAgIHRoaXMubGlrZXMgPSBsaWtlcztcbiAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICB0aGlzLmhhbmRsZU9wZW5CaWdJbWFnZSA9IGhhbmRsZU9wZW5CaWdJbWFnZTtcbiAgICB0aGlzLmhhbmRsZU9wZW5Qb3B1cERlbGV0ZSA9IGhhbmRsZU9wZW5Qb3B1cERlbGV0ZTtcbiAgICB0aGlzLmhhbmRsZUxpa2UgPSBoYW5kbGVMaWtlO1xuICB9XG5cbiAgX2dldENhcmRFbGVtZW50KCkge1xuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IpXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yc09mQ2FyZC5jYXJkRWxlbWVudClcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XG4gIH1cblxuICBnZW5lcmF0ZUNhcmQoKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRDYXJkRWxlbWVudCgpO1xuICAgIHRoaXMuYnV0dG9uTGlrZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBzZWxlY3RvcnNPZkNhcmQuYnV0dG9uTGlrZVxuICAgICk7XG4gICAgdGhpcy5fYnV0dG9uRGVsID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHNlbGVjdG9yc09mQ2FyZC5idXR0b25EZWxcbiAgICApO1xuICAgIHRoaXMubGlrZUNvdW50ZXIgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgc2VsZWN0b3JzT2ZDYXJkLmxpa2VDb3VudGVyXG4gICAgKTtcbiAgICB0aGlzLmVsSW1nID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcnNPZkNhcmQuZWxlbWVudHNJbWFnZSk7XG4gICAgdGhpcy5lbEltZy5zcmMgPSB0aGlzLl9saW5rO1xuICAgIHRoaXMuZWxJbWcuYWx0ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yc09mQ2FyZC5lbGVtZW50c05hbWUpLnRleHRDb250ZW50ID1cbiAgICAgIHRoaXMuX25hbWU7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIHRoaXMuZWxJbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChfKSA9PiB7XG4gICAgICB0aGlzLmVsSW1nLnNyYyA9XG4gICAgICAgIFwiaHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS8yNTE1ZDYzZWQ5ZjAxMGM0NTE4OGZiMTZhYTgxM2Y2N2M4ODZmY2I3MTNmODM5NTk2NGFiY2JkMjJiZDc5MWVmLzY4NzQ3NDcwNzMzYTJmMmY2ZDY1NjQ2OTYxMmU2NzY5NzA2ODc5MmU2MzZmNmQyZjZkNjU2NDY5NjEyZjQxMzk0NTYzNDI3YTY0MzY3NDM4NDQ1YTY1MmY2NzY5NzA2ODc5MmU2NzY5NjZcIjtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9idXR0b25EZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChfKSA9PiB0aGlzLl9oYW5kbGVEZWxldGVDbGljaygpKTtcbiAgICB0aGlzLmJ1dHRvbkxpa2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChfKSA9PiB0aGlzLl90b2dnbGVMaWtlKCkpO1xuICAgIHRoaXMuZWxJbWcuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChfKSA9PiB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKCkpO1xuICB9XG5cbiAgZGVsZXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgfVxuXG4gIGdldENhcmRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBfdG9nZ2xlTGlrZSgpIHtcbiAgICB0aGlzLmhhbmRsZUxpa2UodGhpcyk7XG4gICAgdGhpcy5idXR0b25MaWtlLmNsYXNzTGlzdC50b2dnbGUoc2VsZWN0b3JzT2ZDYXJkLmxpa2VkKTtcbiAgfVxuXG4gIF9oYW5kbGVJbWFnZUNsaWNrKCkge1xuICAgIHRoaXMuaGFuZGxlT3BlbkJpZ0ltYWdlKHRoaXMuX2xpbmssIHRoaXMuX25hbWUpO1xuICB9XG5cbiAgX2hhbmRsZURlbGV0ZUNsaWNrKCkge1xuICAgIHRoaXMuaGFuZGxlT3BlblBvcHVwRGVsZXRlKHRoaXMpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHtcclxuICAgICAgZm9ybVNlbGVjdG9yLFxyXG4gICAgICBpbnB1dFNlbGVjdG9yLFxyXG4gICAgICBzdWJtaXRCdXR0b25TZWxlY3RvcixcclxuICAgICAgaW5hY3RpdmVCdXR0b25DbGFzcyxcclxuICAgICAgaW5wdXRFcnJvckNsYXNzLFxyXG4gICAgICBlcnJvckNsYXNzLFxyXG4gICAgfSxcclxuICAgIGZvcm1FbFxyXG4gICkge1xyXG4gICAgdGhpcy5fZm9ybVNlbGVjdG9yID0gZm9ybVNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBpbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gZXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Zvcm1FbCA9IGZvcm1FbDtcclxuICB9XHJcbiAgLy8g0JzQtdGC0L7QtCDQstGL0LLQvtC00LAg0YHQvtC+0LHRidC10L3QuNGPINC+0LEg0L7RiNC40LHQutC1XHJcbiAgX3Nob3dFcnJvcihpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICB9XHJcbiAgLy8g0JzQtdGC0L7QtCDRgdC60YDRi9GC0LjRjyDRgdC+0L7QsdGJ0LXQvdC40Y8g0L7QsSDQvtGI0LjQsdC60LVcclxuICBfaGlkZUVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgfVxyXG4gIC8vINCc0LXRgtC+0LQg0L/QtdGA0LXQutC70Y7Rh9C10L3QuNGPINCy0LjQtNC40LzQvtGB0YLQuCDQvtGI0LjQsdC60Lgg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINCy0LDQu9C40LTQvdC+0YHRgtC4INC40L3Qv9GD0YLQsFxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX2hpZGVFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc2hvd0Vycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8g0JzQtdGC0L7QtCDQv9GA0L7QstC10YDQutC4INC10YHRgtGMINC70Lgg0YXQvtGC0Ywg0L7QtNC40L0g0L3QtdCy0LDQu9C40LTQvdGL0Lkg0LjQvdC/0YPRglxyXG4gIF9oYXNJbnZhbGlkSW5wdXQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCk7XHJcbiAgfTtcclxuICAvLyDQnNC10YLQvtC0INC/0LXRgNC10LrQu9GO0YfQtdC90LjRjyDQutC90L7Qv9C60Lgg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINC/0YDQtdC00YvQtNGD0YnQtdC5INC/0YDQvtCy0LXRgNC60LhcclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgdGhpcy5kaXNhYmxlQnV0dG9uU3RhdGUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlQnV0dG9uU3RhdGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8g0JzQtdGC0L7QtCDRgNCw0LfQstC10YjQuNCy0LDQvdC40Y8g0LLRgdC10LPQviDQstGL0YjQtSDQvdCwINCy0YHQtSDQuNC90L/Rg9GC0Ysg0LIg0YTQvtGA0LzQtVxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoXykgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8vINCc0LXRgtC+0LQg0L7RgtC60LvRjtGH0LXQvdC40Y8g0LrQvdC+0L/QutC4XHJcbiAgZGlzYWJsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xyXG4gIH1cclxuICAvLyDQnNC10YLQvtC0INCy0LrQu9GO0YfQtdC90LjRjyDQutC90L7Qv9C60LhcclxuICBlbmFibGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgfVxyXG5cclxuICAvLyDQn9GD0LHQu9C40YfQvdGL0Lkg0YHQutGA0YvRgtC40Y8g0L7RiNC40LHQvtC6XHJcbiAgaGlkZUVycm9ycygpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy8g0JzQtdGC0L7QtCDQv9GA0L7QstC10YDQutC4INGE0L7RgNC80YtcclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciB9LCBzZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuXHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKGl0ZW1zKSB7XHJcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB0aGlzLl9yZW5kZXJlcihpdGVtKSk7XHJcbiAgfVxyXG5cclxuICBhcHBlbmRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICBwcmVwZW5kSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgcG9wdXBBdmF0YXJTZWxlY3RvcnMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyB1c2VyTmFtZVNlbGVjdG9yLCB1c2VySm9iU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fdXNlck5hbWVOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VyTmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3VzZXJKb2JOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih1c2VySm9iU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fdXNlckF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBBdmF0YXJTZWxlY3RvcnMudXNlckF2YXRhcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHRoaXMuX3VzZXJOYW1lID0gdGhpcy5fdXNlck5hbWVOb2RlLnRleHRDb250ZW50O1xyXG4gICAgdGhpcy5fdXNlckpvYiA9IHRoaXMuX3VzZXJKb2JOb2RlLnRleHRDb250ZW50O1xyXG4gICAgdGhpcy5fdXNlckRhdGEgPSB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX3VzZXJOYW1lLFxyXG4gICAgICBhYm91dDogdGhpcy5fdXNlckpvYixcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX3VzZXJEYXRhO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICB0aGlzLl91c2VyTmFtZU5vZGUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKGFib3V0KSB7XHJcbiAgICAgIHRoaXMuX3VzZXJKb2JOb2RlLnRleHRDb250ZW50ID0gYWJvdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGxpbmspIHtcclxuICAgIHRoaXMuX3VzZXJBdmF0YXIuc3JjID0gbGluaztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgc2VsZWN0b3JzLFxyXG4gIHZhbGlkYXRpb25PYmplY3QsXHJcbiAgc2VsZWN0b3JzT2ZDYXJkLFxyXG4gIHByb2ZpbGVGb3JtLFxyXG4gIGNhcmRGb3JtLFxyXG4gIGF2YXRhckZvcm0sXHJcbiAgYnV0dG9uQXZhdGFyRWRpdCxcclxuICBidXR0b25FZGl0LFxyXG4gIGJ1dHRvbkFkZCxcclxuICBjYXJkc0NvbnRhaW5lcixcclxuICBwcm9maWxlQnV0dG9uRWxlbWVudCxcclxuICBhdmF0YXJGb3JtQnV0dG9uLFxyXG4gIGNhcmRGb3JtQnV0dG9uLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmltcG9ydCB7IHJlbmRlckxvYWRpbmcgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHMuanNcIjtcclxuXHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBQb3B1cERlbGV0ZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cERlbGV0ZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQaWN0dXJlUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUGljdHVyZVBvcHVwLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5cclxuLy8gQVBJXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoKTtcclxuXHJcbi8vINCX0LDQs9GA0YPQt9C60LAg0LTQsNC90L3Ri9GFINC/0YDQvtGE0LjQu9GPXHJcbmFwaVxyXG4gIC5nZXRJbml0aWFsVXNlcigpXHJcbiAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgdXNlci5zZXRVc2VySW5mbyhyZXN1bHQpO1xyXG4gICAgdXNlci5zZXRVc2VyQXZhdGFyKHJlc3VsdC5hdmF0YXIpO1xyXG4gICAgY29uc3QgdXNlcklkID0gcmVzdWx0Ll9pZDtcclxuXHJcbiAgICAvLyDQl9Cw0LPRgNGD0LfQutCwINC90LDRh9Cw0LvRjNC90YvRhSDQutCw0YDRgtC+0YfQtdC6XHJcbiAgICBhcGlcclxuICAgICAgLmdldEluaXRpYWxDYXJkcygpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICBjYXJkc0xpc3QucmVuZGVySXRlbXMocmVzdWx0KTsgLy8g0LLRgdGC0LDQstC60LAg0LrQsNGA0YLQvtGH0LXQulxyXG4gICAgICAgIGNvbnN0IGNhcmRzTm9kZUxpc3QgPSBjYXJkc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIik7IC8vINCy0YHRgtCw0LLQutCwINC70LDQudC60L7QslxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBjYXJkc05vZGVMaXN0W2ldLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuXCIpLnRleHRDb250ZW50ID1cclxuICAgICAgICAgICAgcmVzdWx0W2ldLmxpa2VzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g0L/RgNC+0LLQtdGA0LrQsCDRgdCy0L7QuNGFINC60LDRgNGC0L7Rh9C10LpcclxuICAgICAgICAvLyDQu9Cw0LnQutC90YPRgtCwINC70Lgg0LzQvdC+0LlcclxuICAgICAgICBmdW5jdGlvbiBpc0xpa2VkKGFycmF5KSB7XHJcbiAgICAgICAgICBjb25zdCBhcnJheU9mTGlrZWRJZCA9IFtdO1xyXG4gICAgICAgICAgYXJyYXkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBhcnJheU9mTGlrZWRJZC5wdXNoKGVsZW1lbnQuX2lkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgY29uc3QgY29udGFpbnNVc2VySWQgPSBhcnJheU9mTGlrZWRJZC5zb21lKFxyXG4gICAgICAgICAgICAoZWxlbWVudCkgPT4gZWxlbWVudCA9PT0gdXNlcklkXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgcmV0dXJuIGNvbnRhaW5zVXNlcklkO1xyXG4gICAgICAgIH0gLy8g0LvQsNC50LrQvdGD0YLQsCDQu9C4INC80L3QvtC5IC8vXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAvLyDQtNC70Y8g0YPQtNCw0LvQtdC90LjRj1xyXG4gICAgICAgICAgaWYgKHJlc3VsdFtpXS5vd25lci5faWQgIT09IHVzZXJJZCkge1xyXG4gICAgICAgICAgICBjYXJkc05vZGVMaXN0W2ldLnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX3RyYXNoXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8g0LTQu9GPINC70LDQudC60L7QslxyXG4gICAgICAgICAgaWYgKGlzTGlrZWQocmVzdWx0W2ldLmxpa2VzKSkge1xyXG4gICAgICAgICAgICBjYXJkc05vZGVMaXN0W2ldXHJcbiAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzT2ZDYXJkLmJ1dHRvbkxpa2UpXHJcbiAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoc2VsZWN0b3JzT2ZDYXJkLmxpa2VkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTsgLy8g0LLRi9Cy0LXQtNC10Lwg0L7RiNC40LHQutGDINCyINC60L7QvdGB0L7Qu9GMXHJcbiAgICAgIH0pO1xyXG4gICAgLy8g0JfQsNCz0YDRg9C30LrQsCDQvdCw0YfQsNC70YzQvdGL0YUg0LrQsNGA0YLQvtGH0LXQuiAvL1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7IC8vINCy0YvQstC10LTQtdC8INC+0YjQuNCx0LrRgyDQsiDQutC+0L3RgdC+0LvRjFxyXG4gIH0pO1xyXG5cclxuLy8g0KTRg9C90LrRhtC40Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xyXG4gIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChcclxuICAgIGl0ZW0sXHJcbiAgICBzZWxlY3RvcnMuY2FyZFRlbXBsYXRlLFxyXG4gICAgaGFuZGxlT3BlbkJpZ0ltYWdlLFxyXG4gICAgaGFuZGxlT3BlblBvcHVwRGVsZXRlLFxyXG4gICAgaGFuZGxlTGlrZVxyXG4gICk7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudDtcclxufVxyXG5cclxuLy8g0LvQsNC50LrQuFxyXG5mdW5jdGlvbiBoYW5kbGVMaWtlKGNhcmQpIHtcclxuICBpZiAoY2FyZC5idXR0b25MaWtlLmNsYXNzTGlzdC5jb250YWlucyhzZWxlY3RvcnNPZkNhcmQubGlrZWQpKSB7XHJcbiAgICBhcGlcclxuICAgICAgLmRpc2xpa2VDYXJkKGNhcmQuZ2V0Q2FyZElkKCkpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICBjYXJkLmxpa2VDb3VudGVyLnRleHRDb250ZW50ID0gcmVzdWx0Lmxpa2VzLmxlbmd0aDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAvLyDQstGL0LLQtdC00LXQvCDQvtGI0LjQsdC60YMg0LIg0LrQvtC90YHQvtC70YxcclxuICAgICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGFwaVxyXG4gICAgICAubGlrZUNhcmQoY2FyZC5nZXRDYXJkSWQoKSlcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGNhcmQubGlrZUNvdW50ZXIudGV4dENvbnRlbnQgPSByZXN1bHQubGlrZXMubGVuZ3RoO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7IC8vINCy0YvQstC10LTQtdC8INC+0YjQuNCx0LrRgyDQsiDQutC+0L3RgdC+0LvRjFxyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vINCu0LfQtdGAXHJcbmNvbnN0IHVzZXIgPSBuZXcgVXNlckluZm8oe1xyXG4gIHVzZXJOYW1lU2VsZWN0b3I6IHNlbGVjdG9ycy5wcm9maWxlTmFtZSxcclxuICB1c2VySm9iU2VsZWN0b3I6IHNlbGVjdG9ycy5wcm9maWxlQ2hhcmFjdGVyLFxyXG59KTtcclxuXHJcbi8vINCf0L7Qv9Cw0L/RiyAvL1xyXG4vLyDQv9C+0L/QsNC/INGBINC60LDRgNGC0LjQvdC60L7QuVxyXG5jb25zdCBwaWN0dXJlUG9wdXAgPSBuZXcgUGljdHVyZVBvcHVwKHNlbGVjdG9ycy5wb3B1cEltZyk7XHJcbnBpY3R1cmVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5mdW5jdGlvbiBoYW5kbGVPcGVuQmlnSW1hZ2UobGluaywgbmFtZSkge1xyXG4gIHBpY3R1cmVQb3B1cC5vcGVuKGxpbmssIG5hbWUpO1xyXG59XHJcbi8vINC/0L7Qv9Cw0L8g0YPQtNCw0LvQtdC90LjRjyDQutCw0YLQvtGH0LrQuFxyXG5jb25zdCBwb3B1cERlbGV0ZSA9IG5ldyBQb3B1cERlbGV0ZShzZWxlY3RvcnMucG9wdXBEZWxldGUpO1xyXG5wb3B1cERlbGV0ZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5mdW5jdGlvbiBoYW5kbGVPcGVuUG9wdXBEZWxldGUoY2FyZCkge1xyXG4gIHBvcHVwRGVsZXRlLnNldFN1Ym1pdEFjdGlvbigoKSA9PiB7XHJcbiAgICBhcGlcclxuICAgICAgLmRlbENhcmQoY2FyZC5nZXRDYXJkSWQoKSlcclxuICAgICAgLnRoZW4ocG9wdXBEZWxldGUuY2xvc2UoKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAvLyDQstGL0LLQtdC00LXQvCDQvtGI0LjQsdC60YMg0LIg0LrQvtC90YHQvtC70YxcclxuICAgICAgfSk7XHJcbiAgICBjYXJkLmRlbGV0ZUNhcmQoKTtcclxuICB9KTtcclxuICBwb3B1cERlbGV0ZS5vcGVuKCk7XHJcbn1cclxuXHJcbi8vINC/0L7Qv9Cw0L8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9GA0L7RhNC40LvRj1xyXG5jb25zdCBwb3B1cFdpdGhGb3JtUHJvZmlsZSA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIHNlbGVjdG9ycy5wb3B1cFByb2ZpbGUsXHJcbiAgKGRhdGEpID0+IHtcclxuICAgIHJlbmRlckxvYWRpbmcodHJ1ZSwgcHJvZmlsZUJ1dHRvbkVsZW1lbnQsIFwi0KHQvtGF0YDQsNC90LXQvdC40LUuLi5cIiwgXCLQodC+0YXRgNCw0L3QuNGC0YxcIik7XHJcbiAgICBhcGlcclxuICAgICAgLnNldFVzZXIoZGF0YSlcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHVzZXIuc2V0VXNlckluZm8ocmVzdWx0KTtcclxuICAgICAgICBwb3B1cFdpdGhGb3JtUHJvZmlsZS5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7IC8vINCy0YvQstC10LTQtdC8INC+0YjQuNCx0LrRgyDQsiDQutC+0L3RgdC+0LvRjFxyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgcmVuZGVyTG9hZGluZyhcclxuICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgcHJvZmlsZUJ1dHRvbkVsZW1lbnQsXHJcbiAgICAgICAgICBcItCh0L7RhdGA0LDQvdC10L3QuNC1Li4uXCIsXHJcbiAgICAgICAgICBcItCh0L7RhdGA0LDQvdC40YLRjFwiXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4pO1xyXG5wb3B1cFdpdGhGb3JtUHJvZmlsZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8g0L/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINCw0LLQsNGC0LDRgNCwXHJcbmNvbnN0IHBvcHVwQXZhdGFyID0gbmV3IFBvcHVwV2l0aEZvcm0oc2VsZWN0b3JzLnBvcHVwQXZhdGFyLCAoZGF0YSkgPT4ge1xyXG4gIHJlbmRlckxvYWRpbmcodHJ1ZSwgYXZhdGFyRm9ybUJ1dHRvbiwgXCLQodC+0YXRgNCw0L3QtdC90LjQtS4uLlwiLCBcItCh0L7RhdGA0LDQvdC40YLRjFwiKTtcclxuICBhcGlcclxuICAgIC5zZXRBdmF0YXIoZGF0YS5saW5rKVxyXG4gICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICB1c2VyLnNldFVzZXJBdmF0YXIocmVzdWx0LmF2YXRhcik7XHJcbiAgICAgIHBvcHVwQXZhdGFyLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTsgLy8g0LLRi9Cy0LXQtNC10Lwg0L7RiNC40LHQutGDINCyINC60L7QvdGB0L7Qu9GMXHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICByZW5kZXJMb2FkaW5nKGZhbHNlLCBhdmF0YXJGb3JtQnV0dG9uLCBcItCh0L7RhdGA0LDQvdC10L3QuNC1Li4uXCIsIFwi0KHQvtGF0YDQsNC90LjRgtGMXCIpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5wb3B1cEF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8g0L/QvtC/0LDQvyDRgdC+0LfQtNCw0L3QuNGPINC60LDRgNGC0L7Rh9C60LggY2FyZEZvcm1CdXR0b25cclxuY29uc3QgcG9wdXBXaXRoRm9ybUNhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShzZWxlY3RvcnMucG9wdXBDYXJkLCAoZGF0YSkgPT4ge1xyXG4gIHJlbmRlckxvYWRpbmcodHJ1ZSwgY2FyZEZvcm1CdXR0b24sIFwi0KHQvtC30LTQsNC90LjQtS4uLlwiLCBcItCh0L7Qt9C00LDRgtGMXCIpO1xyXG4gIGFwaVxyXG4gICAgLnNldENhcmQoZGF0YSlcclxuICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgY2FyZHNMaXN0LnByZXBlbmRJdGVtKGNyZWF0ZUNhcmQocmVzdWx0KSk7XHJcbiAgICAgIHBvcHVwV2l0aEZvcm1DYXJkLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTsgLy8g0LLRi9Cy0LXQtNC10Lwg0L7RiNC40LHQutGDINCyINC60L7QvdGB0L7Qu9GMXHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICByZW5kZXJMb2FkaW5nKGZhbHNlLCBjYXJkRm9ybUJ1dHRvbiwgXCLQodC+0LfQtNCw0L3QuNC1Li4uXCIsIFwi0KHQvtC30LTQsNGC0YxcIik7XHJcbiAgICB9KTtcclxufSk7XHJcbnBvcHVwV2l0aEZvcm1DYXJkLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLyDRgdC+0LfQtNCw0L3QuNC1INC90LDRh9Cw0LvRjNC90YvRhSDQutCw0YDRgtC+0YfQtdC6XHJcbmNvbnN0IGNhcmRzTGlzdCA9IG5ldyBTZWN0aW9uKFxyXG4gIHtcclxuICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoaXRlbSk7XHJcbiAgICAgIGNhcmRzTGlzdC5hcHBlbmRJdGVtKGNhcmRFbGVtZW50KTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBzZWxlY3RvcnMuY2FyZEVsZW1lbnRzXHJcbik7XHJcblxyXG4vLyDQodC+0LfQtNCw0LXQvCDQtNC70Y8g0LrQsNC20LTQvtC5INC/0YDQvtCy0LXRgNGP0LXQvNC+0Lkg0YTQvtGA0LzRiyDRjdC60LfQtdC80L/Qu9GP0YAg0LrQu9Cw0YHRgdCwIEZvcm1WYWxpZGF0b3IuXHJcbmNvbnN0IHByb2ZpbGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvbk9iamVjdCwgcHJvZmlsZUZvcm0pO1xyXG5wcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7IC8vINCX0LDQv9GD0YHQutCw0LXQvCDQstCw0LvQuNC00LDRhtC40Y5cclxuY29uc3QgY2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uT2JqZWN0LCBjYXJkRm9ybSk7XHJcbmNhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTsgLy8g0JfQsNC/0YPRgdC60LDQtdC8INCy0LDQu9C40LTQsNGG0LjRjlxyXG5jb25zdCBhdmF0YXJGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvbk9iamVjdCwgYXZhdGFyRm9ybSk7XHJcbmF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpOyAvLyDQl9Cw0L/Rg9GB0LrQsNC10Lwg0LLQsNC70LjQtNCw0YbQuNGOXHJcblxyXG4vLyDQntGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC/0YDQvtGE0LjQu9GPINC/0L4g0LrQu9C40LrRgyDQvdCwINC60L3QvtC/0LrRg1xyXG5idXR0b25FZGl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgcG9wdXBXaXRoRm9ybVByb2ZpbGUub3BlbigpOyAvLyDQntGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQv1xyXG4gIHBvcHVwV2l0aEZvcm1Qcm9maWxlLnNldElucHV0VmFsdWVzKHVzZXIuZ2V0VXNlckluZm8oKSk7IC8vINCX0LDQv9C+0LvQvdGP0LXQvCDQuNC90L/Rg9GC0YtcclxuICBwcm9maWxlRm9ybVZhbGlkYXRvci5oaWRlRXJyb3JzKCk7IC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQuNC90L/Rg9GC0Ysg0L/RgNC4INC+0YLQutGA0YvRgtC40LhcclxufSk7XHJcblxyXG4vLyDQntGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINCw0LLQsNGC0LDRgNCwINC/0YDQvtGE0LjQu9GPINC/0L4g0LrQu9C40LrRgyDQvdCwINCw0LLQsNGC0LDRgFxyXG5idXR0b25BdmF0YXJFZGl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgcG9wdXBBdmF0YXIub3BlbigpOyAvLyDQntGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQv1xyXG4gIGF2YXRhckZvcm1WYWxpZGF0b3IuaGlkZUVycm9ycygpOyAvLyDQodC60YDRi9Cy0LDQtdC8INC+0YjQuNCx0LrQuCDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDQv9GD0YHRgtC+0Lkg0YTQvtGA0LzRi1xyXG4gIGF2YXRhckZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvblN0YXRlKCk7IC8vINCS0YvQutC70Y7Rh9Cw0LXQvCDQutC90L7Qv9C60YNcclxufSk7XHJcblxyXG4vLyDQntGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQvyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQutCw0YDRgtC+0YfQutC4XHJcbmJ1dHRvbkFkZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHBvcHVwV2l0aEZvcm1DYXJkLm9wZW4oKTsgLy8g0J7RgtC60YDRi9Cy0LDQtdC8INC/0L7Qv9Cw0L9cclxuICBjYXJkRm9ybVZhbGlkYXRvci5oaWRlRXJyb3JzKCk7IC8vINCh0LrRgNGL0LLQsNC10Lwg0L7RiNC40LHQutC4INC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INC/0YPRgdGC0L7QuSDRhNC+0YDQvNGLXHJcbiAgY2FyZEZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvblN0YXRlKCk7IC8vINCS0YvQutC70Y7Rh9Cw0LXQvCDQutC90L7Qv9C60YNcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJzZWxlY3RvcnMiLCJ2YWxpZGF0aW9uT2JqZWN0IiwiZm9ybVNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJzZWxlY3RvcnNPZkNhcmQiLCJwb3B1cFNlbGVjdG9ycyIsInJvb3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwb3B1cFByb2ZpbGUiLCJwcm9maWxlRm9ybSIsInByb2ZpbGVCdXR0b25FbGVtZW50IiwiYXZhdGFyRm9ybSIsImF2YXRhckZvcm1CdXR0b24iLCJwb3B1cENhcmQiLCJjYXJkRm9ybSIsImNhcmRGb3JtQnV0dG9uIiwiYnV0dG9uQXZhdGFyRWRpdCIsImJ1dHRvbkVkaXQiLCJidXR0b25BZGQiLCJwb3B1cEltZyIsImZvcm1FbGVtZW50UHJvZmlsZSIsImZvcm1FbGVtZW50Q2FyZCIsImNhcmRzQ29udGFpbmVyIiwicmVuZGVyTG9hZGluZyIsImlzTG9hZGluZyIsImJ1dHRvbiIsInRleHRpbmciLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJBcGkiLCJ0aGlzIiwiX3Rva2VuIiwiX2Jhc2VVcmwiLCJmZXRjaCIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwidGhlbiIsIm5hbWUiLCJhYm91dCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYXZhdGFyIiwibGluayIsIl9pZCIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJldnQiLCJrZXkiLCJjbG9zZSIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiX3BvcHVwIiwiYWRkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVFc2NDbG9zZSIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfY2xvc2VQb3B1cEJ5Q2xpY2siLCJQb3B1cERlbGV0ZSIsIl9mb3JtIiwiYWN0aW9uIiwiX3N1Ym1pdEhhbmRsZXJEZWxldGUiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdEZvcm0iLCJfZm9ybVZhbHVlcyIsIl9pbnB1dExpc3QiLCJmb3JFYWNoIiwiaW5wdXQiLCJ2YWx1ZSIsImRhdGEiLCJfaGFuZGxlU3VibWl0Rm9ybSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfaW5wdXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsIlBpY3R1cmVQb3B1cCIsIl9wb3B1cEltZ1BpY3R1cmUiLCJfY2FwdGlvbk9mUG9wdXBJbWciLCJzcmMiLCJhbHQiLCJDYXJkIiwidGVtcGxhdGVTZWxlY3RvciIsImhhbmRsZU9wZW5CaWdJbWFnZSIsImhhbmRsZU9wZW5Qb3B1cERlbGV0ZSIsImhhbmRsZUxpa2UiLCJsaWtlcyIsIl9uYW1lIiwiX2xpbmsiLCJfdGVtcGxhdGVTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfY2FyZEVsZW1lbnQiLCJfZ2V0Q2FyZEVsZW1lbnQiLCJidXR0b25MaWtlIiwiX2J1dHRvbkRlbCIsImxpa2VDb3VudGVyIiwiZWxJbWciLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfIiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX3RvZ2dsZUxpa2UiLCJfaGFuZGxlSW1hZ2VDbGljayIsInRvZ2dsZSIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtRWwiLCJzb21lIiwiaW5wdXRFbGVtZW50IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9mb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiX2Zvcm1FbCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiX2hpZGVFcnJvciIsIl9zaG93RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oYXNJbnZhbGlkSW5wdXQiLCJkaXNhYmxlQnV0dG9uU3RhdGUiLCJlbmFibGVCdXR0b25TdGF0ZSIsIkFycmF5IiwiZnJvbSIsIl9idXR0b25FbGVtZW50IiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIlNlY3Rpb24iLCJzZWxlY3RvciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsIml0ZW1zIiwiaXRlbSIsImVsZW1lbnQiLCJhcHBlbmQiLCJwcmVwZW5kIiwiVXNlckluZm8iLCJ1c2VyTmFtZVNlbGVjdG9yIiwidXNlckpvYlNlbGVjdG9yIiwiX3VzZXJOYW1lTm9kZSIsIl91c2VySm9iTm9kZSIsIl91c2VyQXZhdGFyIiwiX3VzZXJOYW1lIiwiX3VzZXJKb2IiLCJfdXNlckRhdGEiLCJhcGkiLCJjcmVhdGVDYXJkIiwiZ2VuZXJhdGVDYXJkIiwiY2FyZCIsImRpc2xpa2VDYXJkIiwiZ2V0Q2FyZElkIiwicmVzdWx0IiwibGVuZ3RoIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwibGlrZUNhcmQiLCJnZXRJbml0aWFsVXNlciIsInVzZXIiLCJzZXRVc2VySW5mbyIsInNldFVzZXJBdmF0YXIiLCJ1c2VySWQiLCJnZXRJbml0aWFsQ2FyZHMiLCJjYXJkc0xpc3QiLCJyZW5kZXJJdGVtcyIsImNhcmRzTm9kZUxpc3QiLCJpIiwiaXNMaWtlZCIsImFycmF5IiwiYXJyYXlPZkxpa2VkSWQiLCJwdXNoIiwib3duZXIiLCJwaWN0dXJlUG9wdXAiLCJvcGVuIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJwb3B1cERlbGV0ZSIsInNldFN1Ym1pdEFjdGlvbiIsImRlbENhcmQiLCJkZWxldGVDYXJkIiwicG9wdXBXaXRoRm9ybVByb2ZpbGUiLCJzZXRVc2VyIiwiZmluYWxseSIsInBvcHVwQXZhdGFyIiwic2V0QXZhdGFyIiwicG9wdXBXaXRoRm9ybUNhcmQiLCJzZXRDYXJkIiwicHJlcGVuZEl0ZW0iLCJjYXJkRWxlbWVudCIsImFwcGVuZEl0ZW0iLCJwcm9maWxlRm9ybVZhbGlkYXRvciIsImVuYWJsZVZhbGlkYXRpb24iLCJjYXJkRm9ybVZhbGlkYXRvciIsImF2YXRhckZvcm1WYWxpZGF0b3IiLCJzZXRJbnB1dFZhbHVlcyIsImdldFVzZXJJbmZvIiwiaGlkZUVycm9ycyJdLCJzb3VyY2VSb290IjoiIn0=